{
    "version": "https://jsonfeed.org/version/1",
    "title": "サイプレス",
    "subtitle": "",
    "icon": "https://cypressen.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://cypressen.github.io",
    "items": [
        {
            "id": "https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week3-report/",
            "url": "https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week3-report/",
            "title": "[CS61B_SP21]Week3_report",
            "date_published": "2024-04-07T09:03:16.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>由于最近学校的事开始边忙，该课程的学习进度可能会变缓。</p>\n<p>这篇报告我花了两周完成。篇幅相当大。同时伴随了一篇关于博客网站的踩坑分享<a href=\"https://cypressen.github.io/shokax/shokaxLog/shokax-log-4\"> [shokax] log_4 [踩坑] 本地图片部署后显示异常</a></p>\n<blockquote>\n<p>Suggest</p>\n<ul>\n<li><a href=\"#lecture-8-inheritance-implements\">Lec 8</a> 关于继承</li>\n</ul>\n</blockquote>\n<h1 id=\"lecture-6-dllists-arrays\"><a class=\"anchor\" href=\"#lecture-6-dllists-arrays\">#</a> Lecture 6. DLLists, Arrays</h1>\n<h2 id=\"dllists\"><a class=\"anchor\" href=\"#dllists\">#</a> DLLists</h2>\n<p>反思在上一周编写的链表。</p>\n<blockquote>\n<p>While fast, adding, .last and .prev introduces lots of special cases.</p>\n<p>To avoid these, eighter:</p>\n<blockquote>\n<p>Add an additional sentBack sentinel at the end of the list.</p>\n<p>Make your linked list circular (highly recommended for project 1), with a single sentinel in the middle.</p>\n</blockquote>\n</blockquote>\n<p>为了应对一些特殊情况，我们可以增加一个  <code>sentinel</code>  节点，以及考虑改造成双向链表。</p>\n<details class=\"success\"><summary>展开见图</summary><div>\n<p>添加一个 <code>sentBack</code> <br />\n<img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/2.png\" alt=\"\" /></p>\n<p>也可以充分利用一个 <code>sentinel</code></p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/1.png\" alt=\"\" /></p>\n</div></details>\n<h2 id=\"generics\"><a class=\"anchor\" href=\"#generics\">#</a> Generics</h2>\n<p>泛型 <code>generics</code>  会使我们的类更加的 &quot;现实&quot;</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SSList</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SSList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> sentinel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">SSList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> myList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SSList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not int but Integer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token comment\">// SSList&lt;Integer> myList = new SSList&lt;>();</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在带入 <code>&lt;&gt;</code>  中的类型写法和平时声明的写法不同。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">一般写法</th>\n<th style=\"text-align:center\">泛型写法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">int</td>\n<td style=\"text-align:center\">Integer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">double</td>\n<td style=\"text-align:center\">Double</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">char</td>\n<td style=\"text-align:center\">Character</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">Boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">long</td>\n<td style=\"text-align:center\">Long</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"arrays\"><a class=\"anchor\" href=\"#arrays\">#</a> Arrays</h2>\n<h3 id=\"声明定义\"><a class=\"anchor\" href=\"#声明定义\">#</a> 声明定义</h3>\n<p>有三种方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 默认 0 /null</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动推断数组长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">//int [2] arr1; 不可以这样声明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> w <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"拷贝\"><a class=\"anchor\" href=\"#拷贝\">#</a> 拷贝</h3>\n<p>数组在 Java 是个引用类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引用</span></pre></td></tr></table></figure><p>使用数组拷贝方法可以实现我们想要的拷贝。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>arr2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//arraycopy (源数组，源数组的起始位置，目标数组，目标数组的起始位置，拷贝长度)</span></pre></td></tr></table></figure><h2 id=\"2d-array\"><a class=\"anchor\" href=\"#2d-array\">#</a> 2D Array</h2>\n<h3 id=\"声明定义-2\"><a class=\"anchor\" href=\"#声明定义-2\">#</a> 声明定义</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// ... //</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"lecture-7-alists-resizing-vs-slists\"><a class=\"anchor\" href=\"#lecture-7-alists-resizing-vs-slists\">#</a> Lecture 7. ALists, Resizing, vs. SLists</h1>\n<p>Lec 7 并没有讲太多的对于我来说新鲜的内容，故仅记录一小部分。</p>\n<h3 id=\"generics-alist\"><a class=\"anchor\" href=\"#generics-alist\">#</a> Generics AList</h3>\n<p>在知道了泛型 <code>generics</code> ，可以思考进一步优化列表。</p>\n<p><code>AList</code>  是类似于数组的列表</p>\n<p>比较简单，直接看代码。</p>\n<blockquote>\n<p>注意</p>\n<ul>\n<li>在使用泛型的时候，new 关键词表达式有特定的语法</li>\n<li><code>resize</code>  的扩容思想：  <code>A multiplicative resizing strategy</code>  乘法调整大小策略</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>AList<T></span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Invariants:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * addLast: The next item we want to add, will go into position size.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * getLast: The item we want to return is in position size - 1.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * size: The number of items in the last should be size.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> items<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// Creates an empty list.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">AList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        items <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//items =new T[100] is not allowed, java don't allow to new generics array.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// Resizes the underlying array to the target capacity. Private of course.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        items <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// Inserts X into the back of the list.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not (size + num) but (size * num), the later would be more efficient in time.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        items<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     * Return the item from the back of the list.</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// Gets the ith item int the list (0 is the front).</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// Returns the number of items in the list.</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * Deletes item from back of the list and</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * returns deleted item.</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">T</span> x <span class=\"token operator\">=</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        items<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// we have to add this (if you are still confused, think about an occasion that we use AList to store objects).</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        size <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"lecture-8-inheritance-implements\"><a class=\"anchor\" href=\"#lecture-8-inheritance-implements\">#</a> Lecture 8. Inheritance, Implements</h1>\n<p>这部分内容或许有点 <code>complicated</code></p>\n<h2 id=\"inheritance\"><a class=\"anchor\" href=\"#inheritance\">#</a> Inheritance</h2>\n<p>以下是两个功能相同的方法，仅在传入的参数有不同。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> maxDex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span> longestString <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxDex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> thisString <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> longestString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            maxDex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxDex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> maxDex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> longestString <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxDex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> thisString <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> longestString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            maxDex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxDex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>While overloading works, it is a bad idea in the case of longest. Why?</p>\n<ul>\n<li>Code is virtually identical. Aesthetically gross.</li>\n<li>Won’t work for future lists. If we create a QList class, have to make a third method.</li>\n<li>Harder to <strong>maintain</strong>.\n<ul>\n<li>Example: Suppose you find a bug in one of the methods. You fix it in the SLList version, and forget to do it in the AList version.</li>\n</ul>\n</li>\n<li>Suppose we make another list someday, we'll need yet another function.</li>\n</ul>\n</blockquote>\n<p>在这种情况下，方法传入的类对象可以用它们的共同上位来替代。</p>\n<p>这就需要，类的继承。</p>\n<h3 id=\"hypernym-and-hyponym\"><a class=\"anchor\" href=\"#hypernym-and-hyponym\">#</a> Hypernym and Hyponym</h3>\n<p>上位词 <code>hypernym</code>  ，下位词  <code>hyponym</code></p>\n<blockquote>\n<p>举个例子</p>\n<p>e.g.  <code>dog</code>  是 <code>hypernym</code> ，而贵宾犬 <code>poodle</code>  是 <code>hyponym</code></p>\n</blockquote>\n<blockquote>\n<p>SLLists and ALists are both clearly some kind of &quot;list&quot;.</p>\n<ul>\n<li>List is a  <code>hypernym</code>  of SLList and Alist.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Expressing this in Java is a two-step process:</p>\n<ul>\n<li>Step 1: Define a reference type for our  <code>hypernym</code>  (List61B.java).</li>\n<li>Step 2: Specify that SLLists and ALists are  <code>hyponyms</code>  of that type.</li>\n</ul>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/3.png\" alt=\"\" /></p>\n<hr />\n<h2 id=\"interface-and-implements\"><a class=\"anchor\" href=\"#interface-and-implements\">#</a> Interface and Implements</h2>\n<p>所以，我们要如何实现和使用这种关系呢？</p>\n<h3 id=\"step-1-defining-a-list61b\"><a class=\"anchor\" href=\"#step-1-defining-a-list61b\">#</a> Step 1: Defining a List61B</h3>\n<blockquote>\n<p>We'll use the new keyword <strong>interface</strong> instead of <strong>class</strong> to define a List61B.</p>\n<ul>\n<li>Idea: Interface is a specification of what a list is able to do, not how to do it.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>List61B<Item></span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// \"interface\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"step-2-implementing-the-list61b-interface\"><a class=\"anchor\" href=\"#step-2-implementing-the-list61b-interface\">#</a> Step 2: Implementing the List61B Interface</h3>\n<blockquote>\n<p>We'll now:</p>\n<ul>\n<li>Use the new <strong>implements</strong> keyword to tell the Java compiler that SLList and AList are hyponyms of List61B.</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// two generics should be same name</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// ... //</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"final-use-it\"><a class=\"anchor\" href=\"#final-use-it\">#</a> Final: Use It</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> maxDex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">String</span> longestString <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxDex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> thisString <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> thisString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> longestString<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                maxDex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>maxDex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//call longest(SLList / AList) </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>你可以这样去定义。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> someList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   someList<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于这段代码能实现的解释，详见<a href=\"#dynamic-method-selection\"> Dynamic Method Selection</a></p>\n</blockquote>\n<h2 id=\"override\"><a class=\"anchor\" href=\"#override\">#</a> Override</h2>\n<blockquote>\n<p>If a “subclass” has a method with the exact same signature as in the    “superclass”, we say the subclass <strong>overrides</strong> the method.</p>\n</blockquote>\n<p>在父类 <code>superclass</code>  声明了一系列方法，在子类 <code>subclass</code>  定义这类方法的操作，就叫覆写 <code>override</code></p>\n<p>在实际代码中，使用 <code>@Override</code>  标签提示该方法是覆写的。当然，子类无法对不属于父类的方法使用该标签。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//...//  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>Even if you don’t write @Override, subclass still overrides the method.</li>\n<li>@Override is just an optional reminder that you’re overriding.</li>\n</ul>\n</blockquote>\n<p>不添加这个 <code>@Override</code>  标签也是能通过编译的，但是我们有其他理由</p>\n<blockquote>\n<p>Why use @Override?</p>\n<ul>\n<li>Main reason: Protects against typos.\n<ul>\n<li>If you say @Override, but it the method isn’t actually overriding anything, you’ll get a compile error.</li>\n<li>e.g. <strong>public</strong> void addLats(Item x)</li>\n</ul>\n</li>\n<li>Reminds programmer that method definition came from somewhere higher up in the inheritance hierarchy.</li>\n</ul>\n</blockquote>\n<p>与重载 <code>overload</code>  不同。在形式上，覆写 <code>override</code>  要求方法签名 <code>signature</code>  是一致的，并且其意义与重载不同。</p>\n<blockquote>\n<p><code>signature</code> ，方法签名 / 函数签名。由方法名、参数数量和类型决定。注意，它与返回值类型无关。</p>\n</blockquote>\n<h2 id=\"interface-inheritance\"><a class=\"anchor\" href=\"#interface-inheritance\">#</a> Interface Inheritance</h2>\n<p>接口继承 <code>Interface Inheritance</code></p>\n<blockquote>\n<p>Specifying the capabilities of a subclass using the <strong>implements</strong></p>\n<p>keyword is known as <strong>interface inheritance</strong>.</p>\n<ul>\n<li>Interface: The list of all method signatures.</li>\n<li>Inheritance: The subclass “inherits” the interface from a superclass.</li>\n<li>Specifies what the subclass can do, but not how.</li>\n<li>Subclasses must override all of these methods!\n<ul>\n<li>Will fail to compile otherwise.</li>\n</ul>\n</li>\n<li>Such relationships can be multi-generational.\n<ul>\n<li>Figure: Interfaces in white, classes in green.</li>\n<li>We’ll talk about this in a later lecture.</li>\n</ul>\n</li>\n</ul>\n<p>Interface inheritance is a powerful tool for generalizing code.</p>\n<ul>\n<li>WordUtils.longest works on SLLists, ALists, and even lists that have not yet been invented!</li>\n</ul>\n</blockquote>\n<p>在父类 <code>superclass</code>  声明的一系列方法，在子类继承的时候一定要覆写 <code>override</code>  所有的这些方法，否则编译不通过。</p>\n<p>自然，它也能嵌套。</p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/4.png\" alt=\"\" /></p>\n<hr />\n<h2 id=\"implementation-inheritance\"><a class=\"anchor\" href=\"#implementation-inheritance\">#</a> Implementation Inheritance</h2>\n<p>实现继承 <code>Implementation Inheritance</code></p>\n<blockquote>\n<p>For better or worse, Java also allows <strong>implementation inheritance</strong>.</p>\n<ul>\n<li>Subclasses can inherit signatures AND implementation.</li>\n</ul>\n</blockquote>\n<p>子类可以继承父类声明的方法 <code>interface</code>  和已经定义实现了的方法 <code>implementation</code></p>\n<blockquote>\n<p>Use the <strong>default</strong> keyword to specify a method that subclasses should inherit from an <strong>interface.</strong></p>\n<ul>\n<li>Example: Let’s add a default print()\t method to List61B.java</li>\n</ul>\n</blockquote>\n<p>当然， <code>interface</code>  修饰的父类不只有方法的声明，可以使用 <code>default</code>  关键词在父类中定义方法。</p>\n<p>如果你没有使用 <code>default</code> ，IDEA 就会提示</p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/5.png\" alt=\"\" /></p>\n<p>所以也可以看出，父类被 <code>interface</code>  修饰后，内部的方法默认为 <code>接口 abstract 方法</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ... //</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是，在 <code>List61B</code>  中，我们没有像 <code>sentinel</code> ， <code>size</code>  这样的成员变量。想在这样的条件下去实现 print 方法有点奇怪。</p>\n<p>但是，我们可以使用已声明的方法去帮助完成。这是另一种思路</p>\n<blockquote>\n<p>为了便于观察，这里直接复制在上文展示过的 <code>List61B</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Item</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在其中，我们添加一个 <code>default</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">default</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// size() method</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// get(int i) method</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>至此，我们可以不用在子类 <code>SLList</code>  或 <code>AList</code>  再次写 <code>print</code>  方法，外部也可以同样通过 <code>.</code>  调用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> someList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   someList<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   someList<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么我们要如何对待 <code>default</code>  方法呢，这里有道思考题或许能引导我们进一步思考</p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/6.png\" alt=\"\" /></p>\n<details class=\"success\"><summary>Answer</summary><div>\n<p>B. Efficient for AList, inefficient for SLList<br />\n <code>get</code>  方法对于 <code>SLList</code>  链表结构是低效的</p>\n</div></details>\n<p>所以，在知晓答案之后，我们可以做这样的思考：</p>\n<p>虽然我们有一个大家通用的方法，但是这个方法对于某些子类来说会有更好的选择。</p>\n<p>所以，我们思考能否替代这方法呢？</p>\n<hr />\n<p><code>override</code> ！！</p>\n<p>我们可以在子类中覆写 <code>default</code>  方法</p>\n<blockquote>\n<p>If you don’t like a default method, you can override it.</p>\n<ul>\n<li>Any call to print() on an SLList will use this method instead of default.</li>\n<li>Use (optional) @Override to catch typos like <strong>public void pirnt()</strong></li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//...//</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里又提出了一个问题：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">List61B</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> someList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   someList<span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"elk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这种情况下，我们若调用 <code>somelist.print()</code> ，它会用的是哪一个方法？</p>\n<p>答案是你所想的那个 <code>print</code>  方法。</p>\n<p>也就是覆写的 <code>print()</code></p>\n<p>但是，这是为什么呢？</p>\n<blockquote>\n<p><strong>SLList.print() : And this is the sensible choice. But how does it work?</strong></p>\n<blockquote>\n<p>Before we can answer that, we need new terms: static and dynamic type.</p>\n</blockquote>\n</blockquote>\n<h2 id=\"static-and-dynamic-type\"><a class=\"anchor\" href=\"#static-and-dynamic-type\">#</a> Static and Dynamic Type</h2>\n<blockquote>\n<p>Every variable in Java has a “compile-time type”, a.k.a. “static type”.</p>\n<ul>\n<li>This is the type specified at <strong>declaration</strong>. Never changes!</li>\n</ul>\n<p>Variables also have a “run-time type”, a.k.a. “dynamic type”.</p>\n<ul>\n<li>This is the type specified at <strong>instantiation</strong> (e.g. when using new).</li>\n<li>Equal to the type of the object being pointed at.</li>\n</ul>\n</blockquote>\n<p>通过一个例子可以更直观地理解。</p>\n<details class=\"success\"><summary>可视化过程</summary><div>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/t1.png\" alt=\"\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/t2.png\" alt=\"\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/t3.png\" alt=\"\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/t4.png\" alt=\"\" /></p>\n<hr />\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/t5.png\" alt=\"\" /></p>\n</div></details>\n<hr />\n<h2 id=\"dynamic-method-selection\"><a class=\"anchor\" href=\"#dynamic-method-selection\">#</a> Dynamic Method Selection</h2>\n<p>这直接回答了上面的那个问题。</p>\n<blockquote>\n<p>Suppose we call a method of an object using a variable with:</p>\n<ul>\n<li>compile-time type X</li>\n<li>run-time type Y</li>\n</ul>\n<p>Then if Y <strong>overrides</strong> the method, Y’s method is used instead.</p>\n<ul>\n<li>This is known as “dynamic method selection”.</li>\n</ul>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/7.png\" alt=\"\" /></p>\n<hr />\n<h2 id=\"dynamic-method-selection-puzzle-try-to-predict-the-results\"><a class=\"anchor\" href=\"#dynamic-method-selection-puzzle-try-to-predict-the-results\">#</a> Dynamic Method Selection Puzzle: Try to Predict the Results</h2>\n<p>这是一道值得关注的谜题，这会帮助我们更好地理解动态方法。</p>\n<p>QUES: <strong>最后的输出是什么？</strong></p>\n<blockquote>\n<p>你可以尝试单击图片，这样你或许能更容易关注题目</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/p1.png\" alt=\"\" /></p>\n<details class=\"success\"><summary>必要的小提示</summary><div>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/p2.png\" alt=\"\" /></p>\n</div></details>\n<p>请随便找个地方记录你的答案</p>\n<p>以下的折叠卡将会揭晓答案，well，在你思考完之前，还请你不要继续往下看。</p>\n<hr />\n<h3 id=\"answer\"><a class=\"anchor\" href=\"#answer\">#</a> Answer</h3>\n<details class=\"success\"><summary>Answer</summary><div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"hello animal\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">sniff</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"dog sniff animal\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>d<span class=\"token punctuation\">.</span><span class=\"token function\">praise</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"u r cool dog\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">praise</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// “u r cool animal”</span></pre></td></tr></table></figure></div></details>\n<p>关于这道题，讲座提供了一种理解方式。</p>\n<blockquote>\n<p>These two steps obey rules that are easy to apply, but take time to understand.</p>\n<ul>\n<li>At compile time: We determine the <strong>signature S</strong> of the method to be called.\n<ul>\n<li>S is decided using <strong>ONLY static types</strong>.</li>\n</ul>\n</li>\n<li>At runtime: The dynamic type of the <strong>invoking object</strong> uses its method with this exact signature S.\n<ul>\n<li>By “invoking object”, we mean the object whose method is invoked.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>这两点需要花时间去理解。</p>\n<p>以下贴出了题目所示的代码，并有注释。</p>\n<blockquote>\n<p>你可以将它们粘贴到自己的 IDEA 上，然后配合注释去调动（如果有相应的注释的话），我想这会更好的帮助理解。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Animal</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sniff</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sniff animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">praise</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"u r cool animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Dog</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 注释的方法均可以看作实际存在 Dog 类中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// default void greet(Animal a);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sniff</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animal</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dog sniff animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// default void praise(Animal a);</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">praise</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Dog</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"u r cool dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Animal</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Dog</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">sniff</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        d<span class=\"token punctuation\">.</span><span class=\"token function\">praise</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">praise</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 在编译时期，确定了调用的方法的签名</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 签名由静态类型决定</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> a.greet (d) 确定签名，对 a 来说，Animal 是静态类型</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> 所以就确定了 greet (Animal a)</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> a.sniff (d)，同上，找的是 sniff (Animal a)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> d.praise (d) 对 d 来说，Dog 是静态类型，编译器优先选择 praise (Dog a) 因为它能准确对上签名</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>               经测试，如果删除重载的 praise (Dog a)，编译器就会选择 praise (Animal a)</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre> a.praise (d)，找的就是 praise (Animal a)</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> *  值得注意的是，sniff 被 Dog 覆写了，所以一个签名 sniff (Animal a) 有两个主体 Paul Hilfinger calls these a “Dynamic Method Set”. 动态方法集</pre></td></tr><tr><td data-num=\"30\"></td><td><pre> *  但是对于 praise (Animal a) 来说，没有被覆写，而是被重载了，因此它是和 sniff 不一样的，因此方法名 praise，两个标签 ( praise (Animal a) 和 praise (Dog a) ) 两个主体。</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> *              如果在 Dog 中的 praise 上加上 @Override 标签，会报错，表示 \"方法未从其超类重写方法\"，也就说明了该方法签名无法覆写，即便它们有相同的方法名</pre></td></tr><tr><td data-num=\"32\"></td><td><pre> *  */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// ----------------------------------- //</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 在运行时期，在编译时期确定了方法签名的基础上，最后则确定了调用的方法</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    a.greet (d) -> greet (Animal a) -> default void greet (Animal a)</pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    a.sniff (d) -> sniff (Animal a) -> sniff (Animal a) 在动态类型 Dog 中被覆写</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      -></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      @Override</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>       public void sniff (Animal a) &#123;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          System.out.println (\"dog sniff animal\");</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    d.praise (d) -> praise (Dog a) -> public void praise (Dog a);</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    a.praise (d) -> praise (Animal a) -> default void praise (Animal a);</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    // 对于此条，这里作详细解释：</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            因为在编译时期确定了签名 praise (Animal a)，即便存在 praise (Dog a) 并且传入的变量 d 就是 Dog 类型，但它依旧会确定调用前者。</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            如果我们在 Dog 类下定义一个 praises (Dog a)，然后再调用，会出现报错 \"无法解析 'Animal' 中的方法 'praises'\" 这就说明，在静态类型下，无法调用动态类型的特异成员（覆写的方法除外）。也就是静态类型只能使用其下的方法签名，然后再借此确定方法。</pre></td></tr><tr><td data-num=\"53\"></td><td><pre> */</span></pre></td></tr></table></figure><h2 id=\"interface-vs-implementation-inheritance\"><a class=\"anchor\" href=\"#interface-vs-implementation-inheritance\">#</a> Interface vs. Implementation Inheritance</h2>\n<p>接口继承 <code>interface inheritance</code>  就像说明书，说明了这里有什么方法；</p>\n<p>实现继承 <code>implementation inheritance</code>  就像解释书，解释了怎么实现这些方法。</p>\n<blockquote>\n<p>Interface Inheritance (a.k.a. what):</p>\n<ul>\n<li>Allows you to generalize code in a powerful, simple way.</li>\n</ul>\n<p>Implementation Inheritance (a.k.a. how):</p>\n<ul>\n<li>\n<p>Allows code-reuse: Subclasses can rely on superclasses or interfaces.</p>\n<ul>\n<li>Example: print() implemented in List61B.java.</li>\n</ul>\n</li>\n<li>\n<p>Gives another dimension of control to subclass designers: Can decide whether or not to override default implementations.</p>\n</li>\n</ul>\n<p><strong>Important:</strong> In both cases, we specify “is-a” relationships, not “has-a”.</p>\n<ul>\n<li>Good: Dog implements Animal, SLList implements List61B.</li>\n<li>Bad: Cat implements Claw, Set implements SLList.</li>\n</ul>\n</blockquote>\n<p>关于最后的 <code>Important</code> ，它介绍了如何正确地描述继承关系。</p>\n<p><code>Dog</code>  implements  <code>Animal</code>  ： <code>Dog</code>  是 (is-a)  <code>Animal</code> 。不是  <code>Dog</code>  有 (has-a)   <code>Animal</code> 。</p>\n<h3 id=\"the-dangers-of-implementation-inheritance\"><a class=\"anchor\" href=\"#the-dangers-of-implementation-inheritance\">#</a> The Dangers of Implementation Inheritance</h3>\n<blockquote>\n<p>Particular Dangers of Implementation Inheritance</p>\n<ul>\n<li>Makes it harder to keep track of where something was actually implemented (though a good IDE makes this better).</li>\n<li>Rules for resolving conflicts can be arcane. Won’t cover in 61B.\n<ul>\n<li>Example: What if two interfaces both give conflicting default methods?</li>\n</ul>\n</li>\n<li>Encourages overly complex code (especially with novices).\n<ul>\n<li>Common mistake: Has-a vs. Is-a!</li>\n</ul>\n</li>\n<li>Breaks encapsulation!\n<ul>\n<li>What is encapsulation? See next week.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"lists-in-real-java-code\"><a class=\"anchor\" href=\"#lists-in-real-java-code\">#</a> Lists in Real Java Code</h2>\n<p>当然，Java 肯定有自己的 List。</p>\n<p>至此，我们就能够理解以下代码。</p>\n<blockquote>\n<p>List methods <a href=\"https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/util/List.html\">here</a>.</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print: [5, 10, 15]</span></pre></td></tr></table></figure><p>像使用 <code>JUnit</code>  的方法那样，填上这样的语句。就可以省略 <code>java.util.</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"lab-3\"><a class=\"anchor\" href=\"#lab-3\">#</a> Lab 3</h1>\n<blockquote>\n<p>In this lab, we’ve seen how to:</p>\n<ul>\n<li>Empirically measure the time it takes to construct a data structure.</li>\n<li>Empirically measure the runtime of a data structure’s methods as a function of the size of the data structure.</li>\n<li>Perform a comparison test between two implementations of a class.</li>\n<li>Randomly call methods inside of a class.</li>\n<li>Perform random comparison tests between two implementations of a class.</li>\n<li>Use the resume button in IntelliJ.</li>\n<li>Add a condition to a breakpoint.</li>\n<li>Create an execution breakpoint.</li>\n</ul>\n</blockquote>\n<h2 id=\"timing-tests-for-list61b\"><a class=\"anchor\" href=\"#timing-tests-for-list61b\">#</a> Timing Tests for List61B</h2>\n<h3 id=\"my-answer\"><a class=\"anchor\" href=\"#my-answer\">#</a> My answer</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TimeAList</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">timeAListConstruction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// TODO: YOUR CODE HERE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Ns</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> times <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Stopwatch</span> sw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stopwatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">double</span> startTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">double</span> endTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">128000</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">Ns</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            startTime <span class=\"token operator\">=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">elapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                arr<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            endTime <span class=\"token operator\">=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">elapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            times<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">printTimingTable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ns</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Ns</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TimeSLList</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">timeGetLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// TODO: YOUR CODE HERE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Ns</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> times <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> opCounts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Stopwatch</span> sw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Stopwatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">double</span> startTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">double</span> endTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span> <span class=\"token operator\">=</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">128000</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SLList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            opCounts<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">M</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">Ns</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                arr<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            startTime <span class=\"token operator\">=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">elapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                arr<span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            endTime <span class=\"token operator\">=</span> sw<span class=\"token punctuation\">.</span><span class=\"token function\">elapsedTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            times<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">printTimingTable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ns</span><span class=\"token punctuation\">,</span> times<span class=\"token punctuation\">,</span> opCounts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"randomized-comparison-tests\"><a class=\"anchor\" href=\"#randomized-comparison-tests\">#</a> Randomized Comparison Tests</h2>\n<blockquote>\n<p>One technique for testing code is to do a “comparison test”. In such a test, we have two implementations of the same class.</p>\n<p>One implementation is known (or strongly believed) to be correct, and the other is under development and not yet verified.</p>\n</blockquote>\n<p>也就是借用随机数去调用方法进行测试。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">randomizedTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AListNoResizing</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AListNoResizing</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> operationNumber <span class=\"token operator\">=</span> <span class=\"token class-name\">StdRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operationNumber <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// addLast</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">int</span> randVal <span class=\"token operator\">=</span> <span class=\"token class-name\">StdRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>randVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addLast(\"</span> <span class=\"token operator\">+</span> randVal <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operationNumber <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// size</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size: \"</span> <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"my-answer-2\"><a class=\"anchor\" href=\"#my-answer-2\">#</a> My answer</h3>\n<p>前期配合文档了解更多的测试技巧。</p>\n<p>这里贴出最后找到问题的 JUnit 测试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">randomizedTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AListNoResizing</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AListNoResizing</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BuggyAList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> cmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BuggyAList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> operationNumber <span class=\"token operator\">=</span> <span class=\"token class-name\">StdRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operationNumber <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// addLast</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">int</span> randVal <span class=\"token operator\">=</span> <span class=\"token class-name\">StdRandom</span><span class=\"token punctuation\">.</span><span class=\"token function\">uniform</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>randVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                cmp<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>randVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operationNumber <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// size</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">int</span> sizeL <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">int</span> sizeCmp <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>sizeL<span class=\"token punctuation\">,</span>sizeCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operationNumber <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// getLast</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">int</span> valL <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">int</span> valCmp <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>valL<span class=\"token punctuation\">,</span>valCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>operationNumber <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// removeLast</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">int</span> valL <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">int</span> valCmp <span class=\"token operator\">=</span> cmp<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>valL<span class=\"token punctuation\">,</span>valCmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后仅需修改 BuggyAList 中的一小点。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>BuggyAList</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Item</span> <span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Item</span> x <span class=\"token operator\">=</span> <span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        items<span class=\"token punctuation\">[</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        size <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"proj-1\"><a class=\"anchor\" href=\"#proj-1\">#</a> Proj 1</h1>\n<h2 id=\"intro-2\"><a class=\"anchor\" href=\"#intro-2\">#</a> Intro</h2>\n<p>因为在这个时间段我比较忙碌，此次作业我利用了比较散的时间完成。</p>\n<p>官方给的作业文档对我来说有点理解困难，尤其是 <code>equals</code>  方法和 <code>Iterator</code>  相关的知识。对于我这种 Java 就是跟着该课程学习的来说，对这两个知识点是一头雾水的。</p>\n<p>所以，我也花了相当的时间去完成这项作业。跨越了三天的时间。</p>\n<p>我的代码可以说是有点混乱。我反复修改了很多次，部分代码也是借鉴了其他人的。所以关于此部分的 <code>My answer</code> ，我会着重分享我踩的坑，而不仅仅是贴上答案。</p>\n<blockquote>\n<p>你可以通过在 <code>github</code>  上搜索 <code>cs61b-sp21</code>  获得别人的答案。大多数可供参考。</p>\n</blockquote>\n<hr />\n<details class=\"success\"><summary>于Apr 4开始提交，Apr 7完成满分</summary><div>\n<blockquote>\n<p>中间的一次满分是非常破防后直接提交的别人的代码。不过随后又借助满分答案修正了自己的代码</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week3/8.png\" alt=\"\" /></p>\n</div></details>\n<h2 id=\"packages\"><a class=\"anchor\" href=\"#packages\">#</a> Packages</h2>\n<blockquote>\n<p>A package is a collection of Java classes that all work together towards some common goal. We’ve already seen packages in CS 61B without knowing it. For example,  <code>org.junit</code>  is a package that contains various classes useful for testing, including our familiar  <code>Assert</code>  class, which contains useful static methods like  <code>assertEquals</code> . In other words, when we saw  <code>org.junit.Assert.assertEquals</code> , the  <code>org.junit</code>  was the package name,  <code>Assert</code>  was the class name, and  <code>assertEquals</code>  was the method name. We call  <code>org.junit.Assert.assertEquals</code>  the “canonical name” of the method, and we call  <code>assertEquals</code>  the “simple name” of the method.</p>\n</blockquote>\n<p>软件包是 Java 类的集合，所有这些类都为某个共同目标而工作。在 CS 61B 中，我们已经在不知不觉中看到了包。例如，org.junit 是一个包，其中包含各种对测试有用的类，包括我们熟悉的 Assert 类，它包含有用的静态方法，如 assertEquals。换句话说，当我们看到 org.junit.Assert.assertEquals 时，org.junit 是包名，Assert 是类名，assertEquals 是方法名。我们称 org.junit.Assert.assertEquals 为方法的 &quot;规范名称&quot;，称 assertEquals 为方法的 &quot;简单名称&quot;。</p>\n<blockquote>\n<p>翻译来自 [DeepL 翻译：全世界最准确的翻译](<a href=\"https://www.deepl.com/translator#en/zh/A\">https://www.deepl.com/translator#en/zh/A</a> package is a collection of Java classes that all work together towards some common goal. We’ve already seen packages in CS 61B without knowing it. For example%2C org.junit is a package that contains various classes useful for testing%2C including our familiar Assert class%2C which contains useful static methods like assertEquals. In other words%2C when we saw org.junit.Assert.assertEquals%2C the org.junit was the package name%2C Assert was the class name%2C and assertEquals was the method name. We call org.junit.Assert.assertEquals the “canonical name” of the method%2C and we call assertEquals the “simple name” of the method.)</p>\n</blockquote>\n<blockquote>\n<p>When creating a package, we specify that code is part of a package by specifying the package name at the top of the file using the  <code>package</code>  keyword. For example, if we wanted to declare that a file is part of the  <code>deque</code>  package, we’d add the following line to the top of the file.</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">deque</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h2 id=\"my-answer-3\"><a class=\"anchor\" href=\"#my-answer-3\">#</a> My answer</h2>\n<p>关于具体代码，你可以通过访问我的<a href=\"https://github.com/cypressen/cs61b\"> cypressen/cs61b (github.com)</a>，它将会更新至同学习报告的进度。</p>\n<p>关于此次作业，我并不推荐看我的代码。（主要是懒得优化，对此次的 <code>proj</code>  破防了很多次）</p>\n<p>以下我将分享一些可能的困难。</p>\n<h3 id=\"linkedlistdeque\"><a class=\"anchor\" href=\"#linkedlistdeque\">#</a> LinkedListDeque</h3>\n<h4 id=\"sentinel\"><a class=\"anchor\" href=\"#sentinel\">#</a> Sentinel</h4>\n<p>在讲座中，教授提到建议我们在 <code>proj 1</code>  中使用双向链表，也就是循环链表。但是讲座并没有直接带我们写一遍代码，仅仅是给出了图示。</p>\n<p>所以在设计由一个 <code>sentinel</code>  实现的双向链表上，可能会遇到一些困难</p>\n<p><strong>关于链表为空的时候， <code>sentinel</code>  的前后指向</strong></p>\n<p>这个第一次考虑是在初始化空列表的时候，最开始我设置的是两个都为 null，最后发现这并不符合不变性思想。</p>\n<p>你可以尝试（或许你正在这么做），在设置前后都为 null 的时候，是无法避免在 <code>add</code>  方法和 <code>remove</code>  方法去多写一条 if。</p>\n<p>正确的则是，它应该是个闭环，所以在空列表的时候， <code>sentinel</code>  的前后指向为 <code>sentinel</code>  本身。</p>\n<p>你如果在此遇上困难，建议借助图画。</p>\n<h3 id=\"arraydeque\"><a class=\"anchor\" href=\"#arraydeque\">#</a> ArrayDeque</h3>\n<h4 id=\"arraydequetest\"><a class=\"anchor\" href=\"#arraydequetest\">#</a> ArrayDequeTest</h4>\n<p>我们需要一个 <code>ArrayDequeTest</code>  文件，或许你借官方文档注意到了这点。但我当时对是否要增加这样的文件是有点疑惑的。</p>\n<p>事实上，在我做完所有的事后，发现 Test 真的很重要，对于自己写的绝大部分类，都有专门附上一个 Test 文件的必要。</p>\n<h4 id=\"resize\"><a class=\"anchor\" href=\"#resize\">#</a> Resize</h4>\n<p><code>resize</code>  方法，在 <code>check point</code>  之前文档没有叫我们去实现 <code>resize</code>  方法，但是在最后是需要该方法的，尽管官方文档并没有明确指出。</p>\n<p>包括 <code>equals</code>  和 <code>Iterator</code>  也是如此。</p>\n<p>受此提醒，你或许重新审视自己所完成的内容，是否会有残缺。</p>\n<h3 id=\"maxarraydeque\"><a class=\"anchor\" href=\"#maxarraydeque\">#</a> MaxArrayDeque</h3>\n<p>关于关键字 <code>extends</code> ，在我的印象中，讲座似乎没有涉及这个关键字。在 <code>lec 8</code>  中，似乎没有出现。</p>\n<h4 id=\"comparator\"><a class=\"anchor\" href=\"#comparator\">#</a> Comparator</h4>\n<p>对于我这种 Java 跟着课程走的来说， <code>comparator</code>  也是陌生的。在这个时候就必须借助 <code>gogle</code>  或其他人的代码了。</p>\n<p>在你了解了知识点后，或许对在作业中的实现还是无从下手的情况下，建议去看看别人的代码，或与他人交流（如果有的话）。</p>\n<h4 id=\"test\"><a class=\"anchor\" href=\"#test\">#</a> Test</h4>\n<p>当然，你也要同 <code>ArrayDeque</code>  一样，为此写 Test。</p>\n<h3 id=\"autograder\"><a class=\"anchor\" href=\"#autograder\">#</a> AutoGrader</h3>\n<p>在提交评测期间，我依赖了 <code>AutoGrader</code>  的评测系统（课程并不建议这么做），我这么做是因为我低效地使用评测后的报错信息。</p>\n<p>也就是，在我没有拿到满分的时候我没去关注报错信息，选择的是直接复制报错到搜索栏上，而没有主动去看报错信息的甚至一个单词。这是错误的！！</p>\n<p>你应该做的是，借给出的异常信息做出针对修改。当然，你也可以选择为自己写一个 <code>AutoGrader</code> ，但这也是相当花费精力的（需要考量多种情况，这会令人头疼）。</p>\n<p>高效地使用报错信息会快速的帮助你修改代码。</p>\n<h1 id=\"vocabulary\"><a class=\"anchor\" href=\"#vocabulary\">#</a> VOCABULARY</h1>\n<table>\n<thead>\n<tr>\n<th>词</th>\n<th>解释</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>generics</code></td>\n<td>泛型</td>\n<td></td>\n</tr>\n<tr>\n<td><code>hypernym</code></td>\n<td>上位词</td>\n<td></td>\n</tr>\n<tr>\n<td><code>hyponym</code></td>\n<td>下位词</td>\n<td></td>\n</tr>\n<tr>\n<td><code>specification</code></td>\n<td>规范</td>\n<td></td>\n</tr>\n<tr>\n<td><code>override</code></td>\n<td>覆写</td>\n<td></td>\n</tr>\n<tr>\n<td><code>superclass</code></td>\n<td>父类</td>\n<td></td>\n</tr>\n<tr>\n<td><code>subclass</code></td>\n<td>子类</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Interface Inheritance</code></td>\n<td>接口继承</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Implementation Inheritance</code></td>\n<td>实现继承</td>\n<td></td>\n</tr>\n<tr>\n<td><code>signature</code></td>\n<td>函数签名 / 方法签名</td>\n<td>由函数名、参数的数量和参数的类型组成（<strong>不包括</strong>返回值类型）</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "CS",
                "CS61B",
                "java",
                "CS61B",
                "learningReport"
            ]
        },
        {
            "id": "https://cypressen.github.io/shokax/shokaxLog/shokax-log-4/",
            "url": "https://cypressen.github.io/shokax/shokaxLog/shokax-log-4/",
            "title": "[shokax]log_4 [踩坑]本地图片部署后显示异常",
            "date_published": "2024-03-29T06:38:29.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>在我尝试将<a href=\"https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week3-report\"> [CS61B_SP21] Week3_report</a> 部署到 github 上，发现最后网站上的所有本地图片（头像、文章内引用的本地图片等等）全部无法显示。<br />\n当我在本地将该篇 md 移出文件夹的时候再部署，却发现本地图片又能正常显示。<br />\n于是乎我花了大概 3 个小时，才明白这到底是怎么一回事。</p>\n<p>直接跳转到结论<a href=\"#%E6%80%9D%E8%80%83%E7%9B%B4%E6%8E%A5%E5%8E%9F%E5%9B%A0\">思考直接原因</a></p>\n<h1 id=\"experience\"><a class=\"anchor\" href=\"#experience\">#</a> Experience</h1>\n<h2 id=\"repo快要满了吗\"><a class=\"anchor\" href=\"#repo快要满了吗\">#</a> repo 快要满了吗？</h2>\n<p>我首先想的是库的大小是不是已经超过了限制。因为在我不选择添加新的文章的时候能正常显示图片。</p>\n<blockquote>\n<p>目前我对 github 的工作还是很陌生的</p>\n</blockquote>\n<p>所以我在网上查找了 &quot;如何知道库的大小&quot; &quot;如何给库瘦身&quot;<br />\n 但搜索出来的方法一是我看的迷糊，二是我不敢做。<br />\n但我还是尝试了一个多小时。在了解我的库大小还绰绰有余的时候我开始怀疑问题不在这。</p>\n<h2 id=\"是hexo的问题\"><a class=\"anchor\" href=\"#是hexo的问题\">#</a> 是 hexo 的问题？</h2>\n<p>但我依旧没有跳出 <code>大小</code> 的问题，先是关联了 hexo 再搜索关于大小的问题，再是检查图片资源的路径问题。<br />\n在这又费了部分时间。</p>\n<p>不过好在，这里我思考了路径的问题。</p>\n<h2 id=\"思考直接原因\"><a class=\"anchor\" href=\"#思考直接原因\">#</a> 思考直接原因</h2>\n<p>在频繁试错后我破防了，破防后才知道冷静思考。</p>\n<p>图片显示不出来，在 html 上的体现就是图片的链接有问题，于是我在库中去找到文章的 index.html<br />\n<img loading=\"lazy\" data-src=\"/pic/shokax/log_4/1.png\" alt=\"\" /><br />\n 可以看到图片的格式是 <code>.webp</code> ，于是我在库中找到对应目录，发现并没有 <code>.webp</code>  的图片，仅有 <code>.png</code>  的图片。<br />\n<img loading=\"lazy\" data-src=\"/pic/shokax/log_4/2.png\" alt=\"\" /><br />\n至此，我恍然大悟。<br />\n问题果真不在大小，在于图片链接错误。<br />\n所以，链接的格式为什么会是 <code>.webp</code>  而不是 <code>.png</code>  呢？<br />\n我突然想到，在 <code>_config.yml</code>  文件下有个自动将图片处理成 <code>.webp</code>  格式的配置<br />\n<img loading=\"lazy\" data-src=\"/pic/shokax/log_4/3.png\" alt=\"\" /><br />\n我将 <code>enable: true</code>  配置为 <code>false</code>  的时候，最后所有图片能在网站上正常显示了。<br />\n花了近 3 个小时，问题竟在这长度不达 20 的字符串中。</p>\n<p>最后在官方给的配置教程中发现了这么一句话。<br />\n<img loading=\"lazy\" data-src=\"/pic/shokax/log_4/4.png\" alt=\"\" /><br />\n也就是，要使用两次 <code>hexo g</code>  才能将图片转化成 <code>webp</code>  格式。而在平时我自然地只是用一次 <code>hexo g</code> 。</p>\n<blockquote>\n<p>至于为什么要用 <code>webp</code> ，使用 <code>webp</code>  可以使图片资源加载更快</p>\n</blockquote>\n<p>结案了。</p>\n<blockquote>\n<p>至于为什么在我移除新添的文件后能够正常显示图片，那是因为我在移除之后我习惯性地又一次 <code>hexo g</code>  了，这时候就成功自动 webp 化了</p>\n</blockquote>\n",
            "tags": [
                "shokax",
                "shokaXlog",
                "log"
            ]
        },
        {
            "id": "https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week2-report/",
            "url": "https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week2-report/",
            "title": "[CS61B_SP21]Week2_report",
            "date_published": "2024-03-20T07:52:24.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>这周的课程主要讲了关于测试、调试、链表、以及一些编程思想。</p>\n<p>这篇博文大量引用了原文，有一部分是我认为比较有趣或是经典的话。</p>\n<p>博文的篇幅可能较大，所以我将精选一部分内容在 Suggest 列出</p>\n<blockquote>\n<p>Suggest</p>\n<ul>\n<li>\n<p><a href=\"#reference-type\">Reference Type</a> 关于 Java 的值传递特性</p>\n</li>\n<li>\n<p><a href=\"#better-way-to-write-list\">Better way to write list</a> 记录了优化糟糕的列表编写方式的过程</p>\n</li>\n<li>\n<p><a href=\"#invariants\">Invariants</a> 不变性思想</p>\n</li>\n</ul>\n</blockquote>\n<div class=\"note info\">\n<p>在你阅读之前，你或许需要做完 Week 2 的内容</p>\n</div>\n<h1 id=\"lecture-3-testing\"><a class=\"anchor\" href=\"#lecture-3-testing\">#</a> Lecture 3. Testing</h1>\n<blockquote>\n<p>How do you know that your code works?</p>\n</blockquote>\n<blockquote>\n<p>In the real world, programmers believe their code works because of tests they write themselves</p>\n</blockquote>\n<p>测试自己的代码，这似乎于调试不同</p>\n<h2 id=\"junit\"><a class=\"anchor\" href=\"#junit\">#</a>  <code>JUnit</code></h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TestSort</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Testsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"have\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"have\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> expected<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The position '\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"' seems to be wrong. Expected '\"</span> <span class=\"token operator\">+</span> expected<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' but get '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">Testsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Sort</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// some sort method, like selection sort.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>TestSort</code>  中，中间这块代码有点冗长</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> input<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> expected<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The position '\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"' seems to be wrong. Expected '\"</span> <span class=\"token operator\">+</span> expected<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"' but get '\"</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>It was just tedious to write something like this.</p>\n</blockquote>\n<p>引入 <code>JUnit</code>  方法来替代</p>\n<div class=\"note info\">\n<p><code>JUnit</code>  需要在项目结构里引入库。</p>\n<p>具体操作为：项目结构 -&gt; 库 -&gt; 新建项目库 -&gt; 选择 “java” -&gt; 在 IDEA 文件目录下 &quot;/lib&quot; 根目录找到 &quot;junit4.jar&quot;</p>\n</div>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TestSort</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Testsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"have\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"have\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span>Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertArrayEquals</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">,</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Testsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/1.png\" alt=\"终端输出\" /></p>\n<blockquote>\n<p>Silence is an indication that things are working well</p>\n</blockquote>\n<p>没有令人头大的输出是极好的。</p>\n<h3 id=\"tips\"><a class=\"anchor\" href=\"#tips\">#</a> Tips</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>tips</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// with this import, you can use @Test instead of verbose @org.junit.Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// and the same, with this, use assertArrayEquals instead of verbose org.junit.Assert.assertArrayEquals</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// they are like `using` in cpp;</span></pre></td></tr></table></figure><h3 id=\"attention\"><a class=\"anchor\" href=\"#attention\">#</a> ATTENTION</h3>\n<p><code>==</code>   <code>!=</code>  不总是有用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>input <span class=\"token operator\">!=</span> expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里是对变量的值进行比较，而它们的值为地址<br />\n详见<a href=\"#reference-type\"> Reference Type</a></p>\n<h2 id=\"sort-testsort\"><a class=\"anchor\" href=\"#sort-testsort\">#</a>  <code>Sort  </code>  &amp;  <code>TestSort</code></h2>\n<p>在 IDEA，可以借助 IDEA 的功能实现可视化更好的测试</p>\n<p>就像在 <code>proj0</code>  的各种 Test 那样</p>\n<blockquote>\n<p><code>Autograder</code>  in this course, is based on JUnit.</p>\n</blockquote>\n<p>作业评分系统 <code>Autograder</code>  也与 <code>JUnit</code>  有关</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Sort</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/** 具体设计：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     *  使用递归（recursion），借用 helper，选择排序</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 1. 找出候选范围中的最小值，返回索引</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 2. 交换</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 3. 递归</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// find the smallest one in arr range from \"start\" to end;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findSmallest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> smallestIndex <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">//arr[i].compareTo(); from the internet, if arr[i] &lt; arr[smallestIndex], return -1.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>smallestIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                smallestIndex <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> smallestIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// swap two elements by index</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">String</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>index1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>index2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// recursion</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">==</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">int</span> smallestIndex <span class=\"token operator\">=</span> <span class=\"token function\">findSmallest</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> smallestIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>TestSort</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// with this import, you can use @Test instead of verbose @org.junit.Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token import static\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>junit<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// and the same, with this, use assertArrayEquals instead of verbose org.junit.Assert.assertArrayEquals</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// they are like `using` in cpp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestSort</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// while using junit test, you need to make sure your method is non-static.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Testsort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> input <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"have\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> expected <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"an\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"egg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"have\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Sort</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">assertArrayEquals</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    @TEST</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    public void TestOtherMethod()&#123; ... &#125;</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"lecture-4-references-recursion-and-lists\"><a class=\"anchor\" href=\"#lecture-4-references-recursion-and-lists\">#</a> Lecture 4. References, Recursion, and Lists</h1>\n<h2 id=\"mystery-of-the-walrus\"><a class=\"anchor\" href=\"#mystery-of-the-walrus\">#</a> mystery of the  <code>Walrus</code></h2>\n<p>在 CPP，我们可以直接使用 <code>=</code>  来显性拷贝同类对象，但是在 Java，似乎不是这么简单</p>\n<h3 id=\"different-from-cpp\"><a class=\"anchor\" href=\"#different-from-cpp\">#</a> Different from CPP</h3>\n<p>这里有 CPP 和 Java 逻辑上相同的两段代码</p>\n<h4 id=\"cpp\"><a class=\"anchor\" href=\"#cpp\">#</a> CPP</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Walrus</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> tuskSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">Walrus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">weight</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">tuskSize</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tWalrus <span class=\"token function\">w1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tWalrus w2 <span class=\"token operator\">=</span> w1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tw2<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> w1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">&lt;&lt;</span> w1<span class=\"token punctuation\">.</span>tuskSize <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> w2<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">&lt;&lt;</span> w2<span class=\"token punctuation\">.</span>tuskSize <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>1  10\n5  10\n</code></pre>\n<h4 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Walrus</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Walrus</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> tuskSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Walrus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        weight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        tuskSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">Walrus</span> w1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Walrus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token class-name\">Walrus</span> w2 <span class=\"token operator\">=</span> w1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       w2<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>w1<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> w1<span class=\"token punctuation\">.</span>tuskSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>w2<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> w2<span class=\"token punctuation\">.</span>tuskSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>5 10\n5 10\n</code></pre>\n<p>对比之下，在 Java 中， <code>w2</code>  拷贝 <code>w1</code> ， <code>w1</code>  却和 <code>w2</code>  一同被修改了。这就好似， <code>w2</code>  引用了 <code>w1</code></p>\n<h3 id=\"reference-type\"><a class=\"anchor\" href=\"#reference-type\">#</a> Reference Type</h3>\n<blockquote>\n<p>There are 8 primitive types in Java:</p>\n<ul>\n<li>byte, short, <strong>int</strong> , long, float, <strong>double</strong>, boolean, char</li>\n</ul>\n<p>Everything else, including arrays, is a <strong>reference type</strong>.</p>\n</blockquote>\n<blockquote>\n<p>When we instantiate an Object(e.g. Dog, Walrus, Planet):</p>\n<ul>\n<li>Java first allocates a box of bits for each instance variable of the class and<br />\nfills them with a default value (e.g. 0, null).</li>\n<li>The constructor then usually fills every such box with some other value.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>When we declare a variable of any reference type (Walrus, Dogs, Planet):</p>\n<ul>\n<li>Java allocates exactly a box of size 64 bits, no matter what type of object.</li>\n<li>These bits can be either set to:\n<ul>\n<li>Null (all zeros).</li>\n<li>The 64 bits &quot;address&quot; of a specific instance of that class (returned by  <code>new</code> ).</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>在 Java，对象都是由占 64bits 的变量来索引的，也就是说，变量的内容是对象的地址</p>\n<p>故，默认情况下，在进行拷贝的时候，实际上拷贝的就是地址。</p>\n<blockquote>\n<p>Everything else, including arrays, is a <strong>reference type</strong>.</p>\n</blockquote>\n<blockquote>\n<p>This is sometimes called &quot;box and pointer&quot; notation.</p>\n</blockquote>\n<h4 id=\"attention-2\"><a class=\"anchor\" href=\"#attention-2\">#</a> ATTENTION</h4>\n<p>对基本类型不适用  <code>byte</code>   <code>short</code>   <code>int</code>   <code>long</code>   <code>float</code>   <code>double</code>   <code>boolean</code>   <code>char</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      b <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a = \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b = \"</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>a = 2\nb = 3\n</code></pre>\n<h3 id=\"parameter-passing\"><a class=\"anchor\" href=\"#parameter-passing\">#</a> Parameter Passing</h3>\n<blockquote>\n<p>Passing parameters obeys the same rule: Simply <strong>copy the bits</strong> to the new scope.</p>\n</blockquote>\n<blockquote>\n<p><strong>copy the bits</strong>: This is also called pass by value.</p>\n</blockquote>\n<p>参数传递就是值传递，而储存对象的变量的值，为对应的地址</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Main</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">makeSomeChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Walrus</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      w<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      num <span class=\"token operator\">-=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token class-name\">Walrus</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Walrus</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">makeSomeChange</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w.weight = \"</span> <span class=\"token operator\">+</span> w<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> <span class=\"token string\">\"  num = \"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>w.weight = 110  num = 20\n</code></pre>\n<p>一般情况，对象会以引用的方式来传递。</p>\n<h3 id=\"golden-rules-of-equals-groe\"><a class=\"anchor\" href=\"#golden-rules-of-equals-groe\">#</a> Golden Rules of Equals (GRoE)</h3>\n<blockquote>\n<p>b = a; <strong>copes the bits</strong> from a into b</p>\n<p>Passing parameters <strong>copes the bits</strong></p>\n</blockquote>\n<p>这就是 mystery of the  <code>Walrus</code></p>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<div class=\"note danger\">\n<p>以下代码请不要参考，建议忽略</p>\n</div>\n<p>以下的代码将会在后面进行优化讨论</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>IntLists</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntList</span> rest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntList</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\trest <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">/** return the size of the list using recursion */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rest  <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">/** return the size of the list using no recursion */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">iterativeSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token class-name\">IntList</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> listSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\tlistSize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> listSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">/** return the ith item in list</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t *  0th is the first item */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> rest<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 逆序构建</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token class-name\">IntList</span> myList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntList</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tmyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntList</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> myList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tmyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntList</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> myList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">iterativeSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myList<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>3\n3\n5\n10\n15\n</code></pre>\n<h1 id=\"lecture-5-sllists-nested-classes-sentinel-nodes\"><a class=\"anchor\" href=\"#lecture-5-sllists-nested-classes-sentinel-nodes\">#</a> Lecture 5.  SLLists, Nested Classes, Sentinel Nodes</h1>\n<h2 id=\"a-better-way-to-write-list\"><a class=\"anchor\" href=\"#a-better-way-to-write-list\">#</a> A Better way to write list</h2>\n<p>这节课主要的内容就是如何去写一个更优雅的 list，因此，会有部分代码块随着我们的思维方式频繁地发生改动，这是学习的过程，是锻炼思想的过程。故，我将保留看起来糟糕的代码，并对代码进行反思，引出思考的结果。</p>\n<p>这部分可能看起来有点冗长，在我未开始动手之前就感觉这部分会占很大的文字空间。但是，我想，描述思维的过程，或许就得这样。</p>\n<h3 id=\"step-1\"><a class=\"anchor\" href=\"#step-1\">#</a> Step 1</h3>\n<p>SLList，IntNode 各做一个类，而后 SLList 嵌套 IntNode，不像 Lecture 4 中展示的方法，仅设置一个 IntList 类。现在我们将 list 整体和 list 节点区分对待。</p>\n<p>可以直接复制 IntNode 类的代码到 SLList 的代码中。</p>\n<p>在此基础上，我们写出了一些基本方法  <code>addFirst</code>   <code>addLast</code>   <code>getFirst</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Step1</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SLList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntNode</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\titem <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tnext <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">IntNode</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> first<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token class-name\">SLList</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print 5</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们将思考 <code>size</code>  方法获得 list 的大小。</p>\n<p>考虑使用递归。递归需要传递下一个节点，但是对于 SLList 类是没有对应的成员的，而 IntNode 有。</p>\n<p>所以，在这里我们考虑形参有一个 <code>IntNode</code>  类型，所以得到 <code>int size(IntNode p)</code></p>\n<p>那么修饰词呢，最容易想到的就是 public。OK，but how about  <code>public static</code> ?</p>\n<p>在 size 中我们并没有操作 <code>SLList</code>  的实例成员，我们想要操作的是 <code>IntNode</code> ，操作的仅有参数。</p>\n<p>So,  <code>public static</code>  seems to be better.</p>\n<p>但是，如果是这样的话，我们又将以 <code>SLList.size(L.first);</code>  的方式调用，这样的话，那太糟糕了。</p>\n<p>如果是 <code>L.size();</code>  这会更好。但这又与 size 需要一个参数矛盾。因此我们思考重载一个 <code>size</code> ，声明 <code>public int size()</code></p>\n<p>那么， <code>public int size()</code>  成为公开的了，就可以将 <code>public int size( IntNode p )</code>  的 <code>public</code>  替换为 <code>private</code></p>\n<p>因此， <code>size</code>  方法将会是如下所示:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>size()</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntNode</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// helper method. \"This speaks the secret language of the gods.\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// \"This speaks the language of mortals.\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以 <code>L.size()</code>  调用。</p>\n<p>受 <code>private</code>  和 <code>static</code>  的启发，重新审视刚才的代码，我们将做出如下更改：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>extra changes</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntNode</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 在此类中，我们并不用 SLList 的实例成员，也没必要 public</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntNode</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\titem <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tnext <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">IntNode</span> first<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 避免诸如 first.next.next = first; 的操作</span></pre></td></tr></table></figure><p>Well，我们使得我们的代码更有限制，这样可以让一些操作变得合法。</p>\n<h3 id=\"step-2\"><a class=\"anchor\" href=\"#step-2\">#</a> Step 2</h3>\n<p>所以，我们得到：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Step2</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SLList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntNode</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\titem <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tnext <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">IntNode</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">IntNode</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> first<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntNode</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token class-name\">SLList</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// print 4</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里，我们考虑一些性能问题，比如思考 <code>size</code>  方法。</p>\n<p>如果我们有 100,000 个 or more 节点呢， <code>size</code>  递归将会花费非常糟糕的时间，那有没有解决方案呢？</p>\n<p>在复杂度上，我们可以用空间换时间。</p>\n<p>所以，这里可以声明一个实例成员 <code>size</code> ，在会对节点数量进行增删的方法中维护 <code>size</code>  的值。这样，我们就可以删除递归的 <code>size</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Fast size</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">IntNode</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于 <code>addLast</code>  同样会有 <code>size</code>  那样的问题，但是我们这边不做考虑。</p>\n<p>关于构造方法，我们自然需要一个空的构造方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>SLList()</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\tfirst <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是需要注意，我们此前的所有方法都是以非空列表实现的，因此我们将重新审视已有的方法，以适应空列表。</p>\n<p>经测试，在 <code>addLast</code>  存在问题，若 <code>first == null</code> ，我们无法访问 <code>p.next</code> ，这就相当于在访问 <code>null.next</code> ，很显然，这是不合法的。</p>\n<p>因此，最开始想到的方案就是在 <code>addLast</code>  增加一次判断。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>after</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>first <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">IntNode</span> p <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>But...it's a little ugly.</p>\n<p>I mean it's just getting a little bloated.</p>\n</blockquote>\n<p>Well，我们的目光不应该只放在应对特殊的处理，我们需要用特殊的思维来处理特殊本身。</p>\n<p>也就是，尝试将它化为一般情况。</p>\n<blockquote>\n<p>Code that has special cases is hard to reasonable, human beings only have so much working memory, so whenever you have code that requires you to be thinking about, exceptions to the rules and so forth. It's just harder than something where everything behaves in one consistent way.</p>\n</blockquote>\n<p>在这里，我们引入 <code>sentinel node</code> ，在之前我们或许见过相似的身影，即 <code>dummy node</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>sentinel</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">IntNode</span> sentinel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tsentinel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//sentinel.item 可以是任意数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tsentinel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tsentinel<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tsentinel<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>sentinel<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token class-name\">IntNode</span> p <span class=\"token operator\">=</span> sentinel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> sentinel<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以，我们最开始的 <code>first</code>  可以删去了。</p>\n<h3 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> Final</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>Final</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SLList</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IntNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntNode</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\titem <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tnext <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">/** The first item (if it exists) is at sentinel.next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     *  sentinel node, which is just like dummy node*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">IntNode</span> sentinel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">/** Fast size()*/</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">//sentinel.item 可以是任意数字</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\tsentinel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tsentinel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tsentinel<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tsize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tsentinel<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> sentinel<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token class-name\">IntNode</span> p <span class=\"token operator\">=</span> sentinel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\tp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntNode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tsize<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> sentinel<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token class-name\">SLList</span> <span class=\"token constant\">L1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token constant\">L1</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token constant\">L1</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L1</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L1</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token class-name\">SLList</span> <span class=\"token constant\">L2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span>\t<span class=\"token class-name\">SLList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token constant\">L2</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token constant\">L2</span><span class=\"token punctuation\">.</span><span class=\"token function\">addFirst</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L2</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">L2</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sum\"><a class=\"anchor\" href=\"#sum\">#</a> Sum</h3>\n<ul>\n<li>在类范围将列表和节点分隔又联系起来，尽可能单元化</li>\n<li>有时候，我们需要做出空间换取时间或者时间换空间的策略</li>\n<li>使用 <code>private</code>   <code>static</code>  等关键词使代码更规范</li>\n<li>将特殊情况一般化</li>\n<li>在做出关联性改变的时候需要重新审视先前的结果</li>\n</ul>\n<h2 id=\"invariants\"><a class=\"anchor\" href=\"#invariants\">#</a> Invariants</h2>\n<blockquote>\n<p>An invariant is a condition that is guaranteed to be true during code execution.</p>\n<p>(assuming there are no bus in your code)</p>\n</blockquote>\n<blockquote>\n<p>An SLList with a sentinel node has at least the following invariants:</p>\n<ul>\n<li>The sentinel reference always points to a sentinel node.</li>\n<li>The first node (if it exists), is always at sentinel.next.</li>\n<li>The size variable is always the total number of items that have been added.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Invariants make it easier to reason about code:</p>\n<ul>\n<li>Can assume they are true to simplify code (e.g. addLast doesn't need to worry about nulls).</li>\n<li>Must ensure that methods preserve invariants.</li>\n</ul>\n</blockquote>\n<p>这是所谓的 <strong>结构化编程中的 invariants 思想</strong></p>\n<p>在这部分的体现就是，用 <code>sentinel</code>  来替代  <code>if(first == null)&#123;return;&#125;</code> , 或者，使得先前的情况为永真。</p>\n<h2 id=\"episode\"><a class=\"anchor\" href=\"#episode\">#</a> Episode</h2>\n<p>在 Lecture 5，教授 Josh Hug 的手机响了，有如下对话</p>\n<blockquote>\n<p>*rings* uh oh, my phone's ringing.</p>\n<p>Hello, hi! You're in a video on the Internet forever.</p>\n<p>&quot;What? &quot;----from the phone, confused.</p>\n<p>Oh, I was recording a video for class.</p>\n</blockquote>\n<h1 id=\"lab-2\"><a class=\"anchor\" href=\"#lab-2\">#</a> Lab 2</h1>\n<h2 id=\"lab-2-setup\"><a class=\"anchor\" href=\"#lab-2-setup\">#</a> Lab 2 setup</h2>\n<p>这部分文档说明了在 IDEA 如何使用 pom.xml 文件打开项目。</p>\n<p>在项目结构中找到库，发现它已经为我们引入了项目需要的库。</p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/2.png\" alt=\"\" /></p>\n<p>但是，或许由于官方的教程老旧，在我以同样的方式打开 lab 2...</p>\n<h2 id=\"oops-many-red\"><a class=\"anchor\" href=\"#oops-many-red\">#</a> oops!!! many RED!!!</h2>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/3.png\" alt=\"我死了\" /></p>\n<p>不过好在，有人踩过这坑</p>\n<details class=\"success\"><summary>解决方法</summary><div>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/t1.png\" alt=\"1\" /></p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/t2.png\" alt=\"2\" /></p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/t3.png\" alt=\"3\" /></p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/t4.png\" alt=\"4\" /></p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/t5.png\" alt=\"5\" /></p>\n<p><img loading=\"lazy\" data-src=\"/pic/CS/CS61B/week2/t6.png\" alt=\"6\" /></p>\n</div></details>\n<h2 id=\"lab-2-2\"><a class=\"anchor\" href=\"#lab-2-2\">#</a> Lab 2</h2>\n<p>Lab2 的作业内容主要了解了调试和测试。</p>\n<p>这边直接给出答案。</p>\n<h3 id=\"part-a\"><a class=\"anchor\" href=\"#part-a\">#</a> Part A</h3>\n<p>修改了 <code> while (head.next != null)</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addConstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntList</span> lst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">IntList</span> head <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            head<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            head <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"part-b\"><a class=\"anchor\" href=\"#part-b\">#</a> Part B</h3>\n<p>修改了 <code>while (x &gt; 10)</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">firstDigitEqualsLastDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> lastDigit <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> firstDigit <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> firstDigit <span class=\"token operator\">==</span> lastDigit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"part-c\"><a class=\"anchor\" href=\"#part-c\">#</a> Part C</h3>\n<p>修改了 <code> currElemIsPrime ||squarePrimes(lst.rest)</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">squarePrimes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntList</span> lst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// Base Case: we have reached the end of the list</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lst <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">boolean</span> currElemIsPrime <span class=\"token operator\">=</span> <span class=\"token class-name\">Primes</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currElemIsPrime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            lst<span class=\"token punctuation\">.</span>first <span class=\"token operator\">*=</span> lst<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">boolean</span> nextPrime <span class=\"token operator\">=</span> <span class=\"token function\">squarePrimes</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">.</span>rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ensure recurse first</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> nextPrime <span class=\"token operator\">||</span> currElemIsPrime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// squarePrimes(lst.rest) || currElemIsPrime</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>SquarePrimesTest</code>  中通过自己添加的这段测试，配合调试找出问题</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSquarePrimeMorePrime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">IntList</span> lst <span class=\"token operator\">=</span> <span class=\"token class-name\">IntList</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">boolean</span> changed <span class=\"token operator\">=</span> <span class=\"token class-name\">IntListExercises</span><span class=\"token punctuation\">.</span><span class=\"token function\">squarePrimes</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 -> 4 -> 9\"</span><span class=\"token punctuation\">,</span> lst<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">assertTrue</span><span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"vocabulary\"><a class=\"anchor\" href=\"#vocabulary\">#</a> VOCABULARY</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">词</th>\n<th style=\"text-align:center\">解释</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>assert</code></td>\n<td style=\"text-align:center\">断言</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>recursion</code></td>\n<td style=\"text-align:center\">递归</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>primitive</code></td>\n<td style=\"text-align:center\">原始的</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>parameter</code></td>\n<td style=\"text-align:center\">参数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>sentinel</code></td>\n<td style=\"text-align:center\">哨兵</td>\n<td style=\"text-align:center\"><code>sentinel node</code>  ，就好似 <code>dummy node</code>  (哑节点)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>invariant</code></td>\n<td style=\"text-align:center\">不变性，不变量</td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "CS",
                "CS61B",
                "java",
                "CS61B",
                "learningReport"
            ]
        },
        {
            "id": "https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week1-report/",
            "url": "https://cypressen.github.io/CS/CS61B/CS61B-SP21-Week1-report/",
            "title": "[CS61B_SP21]Week1_report",
            "date_published": "2024-03-17T08:52:11.000Z",
            "content_html": "<h1 id=\"intro\"><a class=\"anchor\" href=\"#intro\">#</a> Intro</h1>\n<p>我的 CS61B SP21 的课程学习于 2024/3/14 开始，这是 Week 1 的学习报告。</p>\n<p>主要为个人的知识记录和理解，部分引用的官方教案的原文。</p>\n<p>第一周主要了解了 CS61B 是个怎样的课程。</p>\n<p>本文篇幅可能较大，我将挑选部分内容在 Suggest 列出</p>\n<p>代码供交流，若有问题可以向我发送邮件，当然，可以于底部评论（如果你可以的话），我也会收到邮件信息。</p>\n<div class=\"note info\">\n<p>在阅读这篇博文之前，你或许需要做一次 proj0</p>\n</div>\n<blockquote>\n<p>Suggest</p>\n<ul>\n<li><a href=\"#keyword-static-in-java\">Keyword  <code>static</code>  in Java </a> 关于 <code>static</code>  的浅理解</li>\n</ul>\n</blockquote>\n<h1 id=\"lecture-2-defining-and-using-classes\"><a class=\"anchor\" href=\"#lecture-2-defining-and-using-classes\">#</a> Lecture 2. Defining and Using Classes</h1>\n<p><strong>借 <code>dogProblem</code>  引入 <code>helper</code>  工具</strong></p>\n<p>在 <code>dogs[]</code>  中，找到满足条件，即 在周围四个当中 <code>weight</code>  最大 的 <code>dog</code> ，并纳入 <code>bigDogs1[]</code> 。如果数组越界，则只考虑存在的 <code>dog</code></p>\n<blockquote>\n<p>Suppose we want to write a method:</p>\n<p><code>public static Dog[] largerThanFourNeighbors(Dog[] dogs)</code></p>\n<p>This method will return a new array that contains every Dog that is larger</p>\n<p>than its 4 closest neighbors, i.e. the two on the left and the two in the right.</p>\n<p>For example:</p>\n<ul>\n<li>Input: Dogs with size  <code>[10, 20, 30, 25, 20, 40, 10]</code></li>\n<li>Returns: Dogs with size  <code>[30, 40]</code>\n<ul>\n<li>30 is greater than 10, 20, 25 and 20.</li>\n<li>40 is greater than 25, 20, and 10.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>思路是这样的：</p>\n<p>大问题是 找到所有的满足条件的元素。“所有” 可以思考遍历所有的元素，那么满足条件呢， “在周围四个当中 <code>weight</code>  最大” 感觉是蛮复杂的，所以将它从大问题下独立出来，使用 <code>helper</code> 。</p>\n<p>现在关注实现条件判断的方法。周围四个，也就是前两个和后两个，可以用 <code>j</code>  的 <code>[-2,2]</code>  范围来限制，但是对于那些邻居中有越界的元素呢？故，在配合 <code>j</code>  的前后遍历下，要判断当前元素是否越界。又引入 <code>helper</code></p>\n<p>现在关注元素是否越界，那这是一个很简单的问题。只需要判断 <code>index</code>  是否在 <code>[0, length)</code>  之间即可。该问题解决，回到上一级问题。</p>\n<p>判断越界已经解决，确保了比较大小的元素是有效的，那么进一步则是简单的大小比较。比较的结果返回大问题。</p>\n<p>大问题已经实现了条件判断，剩下的仅需记录答案了。毕。</p>\n<p>由以上可见，基本思路下我们使用了两个 <code>helper</code> ，分别是条件判断和元素越界。从大问题的角度看，这是一个由复杂到简单的过程。也就是把复杂的问题细化成简单的小问题，然后一个一个解决，随后就自然的解决了大问题。这样的好处是我们能以简单的方式写代码，单个问题复杂性降低，同时还便于调试。</p>\n<p><code>helper</code>  大概反映的就是分治思想了</p>\n<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>dog.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> dog <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        weight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>dogProblem.java</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> dogProblem <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">largerThanFourNeighbors</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> retDogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dog<span class=\"token punctuation\">[</span>dogs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// count</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>dogs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isBiggestDogInFour</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                retDogs<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                cnt<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        retDogs <span class=\"token operator\">=</span> <span class=\"token function\">removeNull</span><span class=\"token punctuation\">(</span>retDogs<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> retDogs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// a method to delete null part of a dog array.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">removeNull</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> actualSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//helper</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newDogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dog<span class=\"token punctuation\">[</span>actualSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>actualSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            newDogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> newDogs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isBiggestDogInFour</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//helper</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">boolean</span> isBiggest <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> compareIndex <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">availableDog</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">,</span>compareIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">[</span>compareIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">>=</span>dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    isBiggest<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> isBiggest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">availableDog</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//helper</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span>dogs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bigDogs1 <span class=\"token operator\">=</span> <span class=\"token function\">largerThanFourNeighbors</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// if we don't use the method like \"removeNull\", we can check whether current index points to null , if it does, break then,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token comment\">// but it makes bigDogs1 less effective, maybe it can make big troubles that hard to notice.So, develop a good habit.</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>bigDogs1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>bigDogs1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"cpp\"><a class=\"anchor\" href=\"#cpp\">#</a> CPP</h2>\n<p>对比 Java，cpp 要考虑内存的管理。</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">dog</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>weight <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">dogProblem</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span>dog <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">largerThanFourNeighbors</span><span class=\"token punctuation\">(</span>dog dogs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        dog <span class=\"token operator\">*</span>retDogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dog<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isBiggestDogInFour</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                retDogs<span class=\"token punctuation\">[</span>cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        retDogs <span class=\"token operator\">=</span> <span class=\"token function\">removeNull</span><span class=\"token punctuation\">(</span>retDogs<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>retDogs<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">static</span> dog <span class=\"token operator\">*</span><span class=\"token function\">removeNull</span><span class=\"token punctuation\">(</span>dog dogs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> actualSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        dog <span class=\"token operator\">*</span>newDogs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dog<span class=\"token punctuation\">[</span>actualSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> actualSize<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            newDogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dogs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        dogs <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> newDogs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isBiggestDogInFour</span><span class=\"token punctuation\">(</span>dog dogs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">bool</span> isBiggest <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">int</span> compareIndex <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">availableDog</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> compareIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">[</span>compareIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> dogs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    isBiggest <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">return</span> isBiggest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">availableDog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    dog dogs<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>bigDogs1<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dogProblem<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">largerThanFourNeighbors</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dogs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token operator\">&lt;&lt;</span>bigDogs1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"keyword-static-in-java\"><a class=\"anchor\" href=\"#keyword-static-in-java\">#</a> Keyword  <code>static</code>  in Java</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>cube</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> cube <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> volunm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        length <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//calculateVolunm(this);</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">calculateVolunm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calculateVolunm</span><span class=\"token punctuation\">(</span>cube c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        c<span class=\"token punctuation\">.</span>volunm <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>length <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> c<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">calculateVolunm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        volunm <span class=\"token operator\">=</span> length <span class=\"token operator\">*</span> width<span class=\"token operator\">*</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> cube <span class=\"token function\">maxCube</span><span class=\"token punctuation\">(</span>cube c1<span class=\"token punctuation\">,</span> cube c2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>volunm <span class=\"token operator\">></span> c2<span class=\"token punctuation\">.</span>volunm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> c1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">public</span> cube <span class=\"token function\">maxCube</span><span class=\"token punctuation\">(</span>cube c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>volunm <span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span>volunm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>cubeLauncher</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> cubeLauncher <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        cube cube1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        cube cube2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        cube myCube1 <span class=\"token operator\">=</span> cube<span class=\"token punctuation\">.</span><span class=\"token function\">maxCube</span><span class=\"token punctuation\">(</span>cube1<span class=\"token punctuation\">,</span> cube2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        cube myCube2 <span class=\"token operator\">=</span> cube1<span class=\"token punctuation\">.</span><span class=\"token function\">maxCube</span><span class=\"token punctuation\">(</span>cube2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>myCube1<span class=\"token punctuation\">.</span>volunm <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> myCube2<span class=\"token punctuation\">.</span>volunm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>static</code>  修饰的成员是所有对象共享的，正因为是共享的，所以在静态方法中不能使用非静态成员。也就是大家共享的方法里不能有个人的成员存在。</p>\n<p>就如上的 <code>cube</code>  类，对 <code>cube</code>  对象，共享计算体积的方法，共享比较大小的方法。计算体积和比较大小均有两套方法，分别是静态和非静态。</p>\n<p>它们的调用存在差异。对于静态方法，我们需要通过类名来调用，因为我们不关心对象。对于非静态方法，我们需要通过对象来调用，因为我们需要这个方法来知道调用对象的信息。进一步说的话，是调用目的的不同导致了调用方式的不同。</p>\n<p>按教授的讲解，假设我们有一个 <code>dog</code>  类。</p>\n<p>使用静态成员就好似：对上帝说，“Hey！请你告诉我狗是怎么走路的”  然后上帝告诉你狗走路的方法 <code>dog.howDogWalks()</code></p>\n<p>使用非静态成员就好似：对一个名为 <code>Marx</code>  的狗说，“ <code>Marx</code> ！让我听听你的叫声” 然后 <code>Marx</code> : &quot;Bark! Bark!&quot;  <code>Marx.makeNoise()</code> ，然后又对一个名为 <code>Danae</code>  的狗说，“来，你叫叫”，然后 <code>Danae</code> : &quot;woof!!&quot;  <code>Danae.makeNoise()</code></p>\n<p>因此，可以看出，对于一些成员，我们有必要使用 <code>static</code>  修饰，我们通过调用可以知道共通的特性，对于不用 <code>static</code>  修饰的成员，我们通过调用可以知道对象的特性。</p>\n<p>简单思考一下，对于以上的 <code>cube</code>  类，假如我们引入一个单位体积权重的变量 <code>weight</code> ，那么它是否要用 <code>static</code>  修饰呢？假如引进的是一个特异性的权重 <code>myWeight</code>  呢？</p>\n<h1 id=\"proj-0\"><a class=\"anchor\" href=\"#proj-0\">#</a> Proj 0</h1>\n<h2 id=\"mvc模式-和-观察者模式\"><a class=\"anchor\" href=\"#mvc模式-和-观察者模式\">#</a> <strong>MVC 模式</strong> 和 <strong>观察者模式</strong></h2>\n<blockquote>\n<p>The skeleton exhibits two <em>design patterns</em> in common use: the Model-View-Controller Pattern (MVC), and the Observer Pattern.</p>\n<p>The MVC pattern divides our problem into three parts:</p>\n<ul>\n<li>The <strong>model</strong> represents the subject matter being represented and acted upon – in this case incorporating the state of a board game and the rules by which it may be modified. Our model resides in the  <code>Model</code> ,  <code>Side</code> ,  <code>Board</code> , and  <code>Tile</code>  classes. The instance variables of  <code>Model</code>  fully determine what the state of the game is. Note: You’ll only be modifying the  <code>Model</code>  class.</li>\n<li>A <strong>view</strong> of the model, which displays the game state to the user. Our view resides in the  <code>GUI</code>  and  <code>BoardWidget</code>  classes.</li>\n<li>A <strong>controller</strong> for the game, which translates user actions into operations on the model. Our controller resides mainly in the  <code>Game</code>  class, although it also uses the GUI class to read keystrokes.</li>\n</ul>\n<p>The MVC pattern is not a topic of 61B, nor will you be expected to know or understand this design pattern on exams or future projects.</p>\n<p>The second pattern utilized is the “Observer pattern”. Basically this means that the <strong>model</strong> doesn’t actually report changes to the <strong>view</strong>. Instead, the <strong>view</strong> <em>registers</em> itself as an <em>observer</em> of the  <code>Model</code>  object. This is a somewhat advanced topic so we will provide no additional information here.</p>\n</blockquote>\n<p>骨架展示了两种常用的<em>设计模式</em>：模型 - 视图 - 控制器模式（MVC）和观察者模式。</p>\n<p>MVC 模式将我们的问题分为三个部分：</p>\n<ul>\n<li><strong>模型</strong>代表被表示和被执行的主题 -- 在本例中，它包含了棋盘游戏的状态和可对其进行修改的规则。我们的模型包含在 <code>Model</code> 、 <code>Side</code> 、 <code>Board</code>  和 <code>Tile</code>  类中。 <code>Model</code>  的实例变量完全决定了游戏的状态。注意：您只需修改 <code>Model</code>  类。</li>\n<li>模型的<strong>视图</strong>，用于向用户显示游戏状态。我们的视图位于 <code>GUI</code>  和 <code>BoardWidget</code>  类中。</li>\n<li>游戏<strong>控制器</strong>，用于将用户操作转化为对模型的操作。我们的控制器主要位于 <code>Game</code>  类中，不过它也使用 GUI 类来读取按键。</li>\n</ul>\n<p>MVC 模式不是 61B 的主题，在考试或未来的项目中也不会要求你了解或理解这种设计模式。</p>\n<p>使用的第二种模式是 &quot;观察者模式&quot;。基本上，这意味着<strong>模型</strong>实际上并不向<strong>视图</strong>报告变化。相反，<strong>视图</strong> <em>将</em>自己<em>注册</em>为 <code>模型</code> 对象的<em>观察者</em>。这是一个有些高深的话题，因此我们在此不再提供更多信息。</p>\n<blockquote>\n<p><em>通过<a href=\"https://www.deepl.com?utm_campaign=product&amp;utm_source=web_translator&amp;utm_medium=web&amp;utm_content=copy_free_translation\"> DeepL.com</a>（免费版）翻译</em></p>\n</blockquote>\n<h2 id=\"my-answer\"><a class=\"anchor\" href=\"#my-answer\">#</a> My answer</h2>\n<p>在如下四个方法中，前三个是相对简单的，最后一个需要官方提示才能轻松完成。</p>\n<p>对于复杂的问题，尽可能地使用了 <code>helper</code>  简化。</p>\n<h3 id=\"public-static-boolean-emptyspaceexistsboard-b\"><a class=\"anchor\" href=\"#public-static-boolean-emptyspaceexistsboard-b\">#</a>  <code>public static boolean emptySpaceExists(Board b)</code></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>public static boolean emptySpaceExists(Board b)</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">emptySpaceExists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// TODO: Fill in this function.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"public-static-boolean-maxtileexistsboard-b\"><a class=\"anchor\" href=\"#public-static-boolean-maxtileexistsboard-b\">#</a>  <code>public static boolean maxTileExists(Board b)</code></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>public static boolean maxTileExists(Board b)</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">maxTileExists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// TODO: Fill in this function.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token constant\">MAX_PIECE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"public-static-boolean-atleastonemoveexistsboard-b\"><a class=\"anchor\" href=\"#public-static-boolean-atleastonemoveexistsboard-b\">#</a>  <code>public static boolean atLeastOneMoveExists(Board b)</code></h3>\n<h4 id=\"未优化\"><a class=\"anchor\" href=\"#未优化\">#</a> 未优化</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>public static boolean atLeastOneMoveExists(Board b) before</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">atLeastOneMoveExists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// TODO: Fill in this function.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasSameNeighbor</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasSameNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">int</span> val <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h4>\n<p>优化了含有逻辑重复的 <code>if</code>  语句，使  <code>hasSameNeighbor</code>  内部代码更简洁。</p>\n<p>优化方式：</p>\n<p>将四个邻居的坐标存在一个二维数组中，通过遍历数组代替对四个邻居分别使用 <code>if</code>  判断</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>public static boolean atLeastOneMoveExists(Board b) after</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">atLeastOneMoveExists</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// TODO: Fill in this function.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> neighbors<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasSameNeighbor</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> neighbors<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasSameNeighbor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> neighbors<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pair<span class=\"token operator\">:</span> neighbors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pair<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Board</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"public-boolean-tiltside-side\"><a class=\"anchor\" href=\"#public-boolean-tiltside-side\">#</a>  <code>public boolean tilt(Side side)</code></h3>\n<p>这个方法是 <code>proj0</code>  中最难的一个，但是官方给的提示非常棒，看完了官方给的文档后会清晰不少。详见官方文档。</p>\n<p>最让我惊叹的是对于四个方向的移动的统一，也就是 <code>board.setViewingPerspective(Side side)</code>  这个方法。这个方法使得我们仅考虑棋盘的一个方向移动，也就是向上 only。否则，我们将重复四次逻辑相同的代码块。</p>\n<h4 id=\"未优化-2\"><a class=\"anchor\" href=\"#未优化-2\">#</a> 未优化</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>public boolean tilt(Side side) before</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tilt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Side</span> side<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">boolean</span> changed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        changed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// TODO: Modify this.board (and perhaps this.score) to account</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// for the tilt to the Side SIDE. If the board changed, set the</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// changed local variable to true.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 旋转棋盘</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        board<span class=\"token punctuation\">.</span><span class=\"token function\">setViewingPerspective</span><span class=\"token punctuation\">(</span>side<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 映射整个棋盘的合并情况</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mergetab <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 行优先遍历，即，从上到下，从左到右</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">Tile</span> myTile <span class=\"token operator\">=</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token function\">moveDistance</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span>mergetab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token comment\">//board.move () 若为 true，则发生合并</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> d<span class=\"token punctuation\">,</span> myTile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        score <span class=\"token operator\">+=</span> myTile<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token comment\">// 记录合并信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        mergetab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    changed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 回旋棋盘</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        board<span class=\"token punctuation\">.</span><span class=\"token function\">setViewingPerspective</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Side</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token function\">checkGameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token function\">setChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> changed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token comment\">// 获得向上移动的步数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">moveDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                distance<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tab<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                distance<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> distance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"优化-2\"><a class=\"anchor\" href=\"#优化-2\">#</a> 优化</h4>\n<p>在未优化代码块中，选择的是行优先遍历，根据官方提示，可以考虑选择列优先遍历。</p>\n<p>优化针对的部分是： 用 <code>boolean</code>  数组记录遍历到的 <code>tile</code>  对应的那一列中，发生了合并的位置。</p>\n<p>由于未优化的代码是行优先遍历，就导致我们需要一个二维的 <code>boolean</code>  数组，但是变为列优先遍历后，我们仅需要一个一维 <code>boolean</code>  数组。优化，也就是优化了一小点点内存。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>public boolean tilt(Side side) after</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tilt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Side</span> side<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">boolean</span> changed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        changed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// TODO: Modify this.board (and perhaps this.score) to account</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// for the tilt to the Side SIDE. If the board changed, set the</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// changed local variable to true.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        board<span class=\"token punctuation\">.</span><span class=\"token function\">setViewingPerspective</span><span class=\"token punctuation\">(</span>side<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 列优先遍历，即，从左到右，从上到下</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 映射单列的合并情况</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> checkMergeTab<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">Tile</span> myTile <span class=\"token operator\">=</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>myTile <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">int</span> d <span class=\"token operator\">=</span> <span class=\"token function\">moveDistance</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>checkMergeTab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token operator\">+</span>d<span class=\"token punctuation\">,</span>myTile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        score<span class=\"token operator\">+=</span> myTile<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token comment\">// 记录合并信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        checkMergeTab<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>d<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    changed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        board<span class=\"token punctuation\">.</span><span class=\"token function\">setViewingPerspective</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Side</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORTH</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">checkGameOver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>changed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token function\">setChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> changed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">moveDistance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">int</span> distance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                distance<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">tile</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                distance<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> distance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"vocabulary\"><a class=\"anchor\" href=\"#vocabulary\">#</a> VOCABULARY</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">词</th>\n<th style=\"text-align:center\">解释</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>curly braces</code></td>\n<td style=\"text-align:center\">{}，花括号</td>\n<td style=\"text-align:center\"><code>curly</code>  弯曲</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>parameter </code></td>\n<td style=\"text-align:center\">参数</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>syntax</code></td>\n<td style=\"text-align:center\">语法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>declaration</code></td>\n<td style=\"text-align:center\">声明</td>\n<td style=\"text-align:center\"><code>declare</code>  声明</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>instantiation</code></td>\n<td style=\"text-align:center\">实例化</td>\n<td style=\"text-align:center\"><code>instantiate</code>  实例化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>assignment</code></td>\n<td style=\"text-align:center\">分配，指派，赋值</td>\n<td style=\"text-align:center\"><code>Dog smallDog = new Dog(5)</code>   <code>declaration</code> ,  <code>instantiation</code>  and  <code>assignment</code> .</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "CS",
                "CS61B",
                "java",
                "CS61B",
                "learningReport"
            ]
        },
        {
            "id": "https://cypressen.github.io/shokax/shokaxLog/shokax-log-3/",
            "url": "https://cypressen.github.io/shokax/shokaxLog/shokax-log-3/",
            "title": "[shokax]log_3",
            "date_published": "2024-02-23T09:21:29.000Z",
            "content_html": "<h1 id=\"活动\"><a class=\"anchor\" href=\"#活动\">#</a> 活动</h1>\n<ul>\n<li>algolia 同步问题解决\n<ul>\n<li>在 <code>hexo d</code>  前要 <code>hexo algolia</code>  向服务器上传索引</li>\n</ul>\n</li>\n<li>音乐盒歌单的超链不同步替代方案\n<ul>\n<li>单曲链接替代</li>\n</ul>\n</li>\n<li>完成评论系统\n<ul>\n<li><code>LeanCloud</code>  数据库部署到 <code>Vercel</code>  服务端 + <code>Waline</code>\n<ul>\n<li>log_2 的问题是因为 <code>MongoDB</code>  部署到 <code>Zeabur</code>  不知配置怎样的环境变量，对于 <code>LeanCloud</code>  deploy to  <code>Vercel</code> ，环境变量的配置简单的多</li>\n</ul>\n</li>\n<li>设置了 QQ 邮箱通知回复</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"关注的问题\"><a class=\"anchor\" href=\"#关注的问题\">#</a> 关注的问题</h1>\n<ul>\n<li>网站的速度优化</li>\n</ul>\n",
            "tags": [
                "shokax",
                "shokaXlog",
                "log"
            ]
        },
        {
            "id": "https://cypressen.github.io/shokax/shokaxLog/shokax-log-2/",
            "url": "https://cypressen.github.io/shokax/shokaxLog/shokax-log-2/",
            "title": "[shokax]log_2",
            "date_published": "2024-02-22T05:05:29.000Z",
            "content_html": "<h1 id=\"活动\"><a class=\"anchor\" href=\"#活动\">#</a> 活动</h1>\n<ul>\n<li>传入了本地内容</li>\n<li>充实一点内容后网站正式开放</li>\n<li>关于 log_1 的问题\n<ul>\n<li>本地 md 能借官方插件有效工作</li>\n<li>图片清晰问题基本解决，考虑以下两个可能原因\n<ul>\n<li>图片托管网站的问题</li>\n<li>_config.yml 的 minify 的图片质量参数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优化分类</li>\n<li>新增音乐</li>\n</ul>\n<h1 id=\"关注的问题\"><a class=\"anchor\" href=\"#关注的问题\">#</a> 关注的问题</h1>\n<ul>\n<li>音乐盒超链无法同步</li>\n<li>algolia 搜索不同步更新内容</li>\n<li>关于评论系统：选择了 waline 评论系统，但 Zeabur 服务器部署失败</li>\n</ul>\n<div class=\"note info\">\n<p>报错信息<br />\n &quot;errno&quot;:500,&quot;errmsg&quot;:&quot;Not initialized&quot;</p>\n</div>\n",
            "tags": [
                "shokax",
                "shokaXlog",
                "log"
            ]
        },
        {
            "id": "https://cypressen.github.io/CS/cpp/%E9%A2%98%E7%BB%83%E7%B0%87/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%A2%98%E7%BB%83%E7%B0%87/",
            "url": "https://cypressen.github.io/CS/cpp/%E9%A2%98%E7%BB%83%E7%B0%87/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E9%A2%98%E7%BB%83%E7%B0%87/",
            "title": "[数据结构与算法]题练簇",
            "date_published": "2024-02-22T03:42:31.000Z",
            "content_html": "<h1 id=\"from-leetcode\"><a class=\"anchor\" href=\"#from-leetcode\">#</a> From Leetcode</h1>\n<hr />\n<h2 id=\"unordered_map-hash\"><a class=\"anchor\" href=\"#unordered_map-hash\">#</a> unordered_map &amp; hash</h2>\n<p><a href=\"https://leetcode.cn/problems/group-anagrams/description/\">49 字母异位词分组</a><br />\n<strong>题解</strong><br />\n先创建一个哈希表，遍历 strs，将遍历得到的每个字符串排序，这样如 “abcb”，“acbb” 之类的字符串排序后都是 “abbc”，在哈希表 “abbc” 这个 key 下储存了 “abcb”，“acbb” 这两个字符串 再遍历一遍哈希表，将哈希表中的 vector 添加进答案中</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p Code</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> <span class=\"token function\">groupAnagrams</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> strs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> umap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>x <span class=\"token operator\">:</span>strs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            string str <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            umap<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">>></span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>umap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//for(auto x : umap)&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//    ret.push_back(x.second);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//&#125;;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"hash-sudoku\"><a class=\"anchor\" href=\"#hash-sudoku\">#</a> hash &amp; sudoku</h2>\n<p><a href=\"https://leetcode.cn/problems/valid-sudoku/description/\">36 有效的数独</a><br />\n<strong>题解</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>暴力</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token operator\">&amp;</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 哈希表存储每一行的每个数是否出现过，默认初始情况下，每一行每一个数都没有出现过</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 整个 board 有 9 行，第二维的维数 10 是为了让下标有 9，和数独中的数字 9 对应。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> col<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储每一列的每个数是否出现过，默认初始情况下，每一列的每一个数都没有出现过</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> box<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 存储每一个 box 的每个数是否出现过，默认初始情况下，在每个 box 中，每个数都没有出现过。整个 board 有 9 个 box。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 遍历到第 i 行第 j 列的那个数，我们要判断这个数在其所在的行有没有出现过，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 同时判断这个数在其所在的列有没有出现过</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 同时判断这个数在其所在的 box 中有没有出现过</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">int</span> curNumber <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curNumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curNumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">[</span>j<span class=\"token operator\">/</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curNumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 之前都没出现过，现在出现了，就给它置为 1，下次再遇见就能够直接返回 false 了。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                box<span class=\"token punctuation\">[</span>j<span class=\"token operator\">/</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>curNumber<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>位运算</strong><br />\n<a href=\"https://leetcode.cn/problems/valid-sudoku/solutions/1002073/gong-shui-san-xie-yi-ti-san-jie-ha-xi-bi-ssxp/\">【宫水三叶】一题三解 :「哈希表」&amp;「数组」&amp;「位运算」</a></p>\n<p>更进一步，我们可以使用一个  <code>intintint</code>  来记录 某行 / 某列 / 某个小方块 的数值填入情况：使用从低位开始的  <code>[1,9]</code>  位来记录该数值是否已被填入。</p>\n<p>例如  <code>(...111000111.)2</code> <br />\n​<br />\n代表数值  <code>[1,3]</code>  和  <code>[7,9]</code>  均被填入。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"><span>a</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isValidSudoku</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> row <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> col <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> area <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> c <span class=\"token operator\">-</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i <span class=\"token operator\">/</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> j <span class=\"token operator\">/</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> u<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> u<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> u<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                col<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                area<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>时间复杂度：在固定  <code>9∗9</code>  的问题里，计算量不随数据变化而变化。复杂度为  <code>O(1)</code> <br />\n 空间复杂度：在固定  <code>9∗9</code>  的问题里，存储空间不随数据变化而变化。复杂度为  <code>O(1)</code></p>\n<hr />\n<h2 id=\"hash-unordered_set\"><a class=\"anchor\" href=\"#hash-unordered_set\">#</a> hash &amp; unordered_set</h2>\n<p><a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/?envType=study-plan-v2&amp;envId=top-100-liked\">128 最长连续序列</a><br />\n<strong>题解</strong><br />\n<a href=\"https://leetcode.cn/problems/longest-consecutive-sequence/solutions/925733/ha-xi-zui-qing-xi-yi-dong-de-jiang-jie-c-xpnr/?envType=study-plan-v2&amp;envId=top-100-liked\">最长连续序列 | 哈希 | 代码简洁易懂 【c++/java 版】</a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">longestConsecutive</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        unordered_set<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> hash<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> res  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>y<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span>y<span class=\"token operator\">-</span>x <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"hash-unordered_map-sliding-window\"><a class=\"anchor\" href=\"#hash-unordered_map-sliding-window\">#</a> hash &amp; unordered_map &amp; sliding window</h2>\n<p><a href=\"https://leetcode.cn/problems/find-all-anagrams-in-a-string/?envType=study-plan-v2&amp;envId=top-100-liked\">438 找到字符串中所有字母异位词</a><br />\n<strong>题解</strong><br />\n<a href=\"https://leetcode.cn/problems/find-all-anagrams-in-a-string/solutions/960733/vectorshu-zu-yi-dong-chuang-kou-by-ai-ru-ovsu/?envType=study-plan-v2&amp;envId=top-100-liked\"> vector 数组 + 移动窗口</a></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">findAnagrams</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> n<span class=\"token operator\">=</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">win</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义窗口字母统计数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">st</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> st<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> slow<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fast<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>fast<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>fast<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            win<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fast<span class=\"token operator\">>=</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>win<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> slow<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 达到 p 的大小后，每次 fast 和 slow 同时移动</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>st<span class=\"token operator\">==</span>win<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                result<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>slow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>个人代码</strong><br />\n以以上代码思路，以 unordered_map 作容器<br />\n对比之下，vector 作容器可能更高效</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">findAnagrams</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> plen <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> slen <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>slen<span class=\"token operator\">&lt;</span>plen<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> cmpHash<span class=\"token punctuation\">;</span><span class=\"token comment\">// 作窗口</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> p<span class=\"token punctuation\">)</span>hash<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 得到固定的哈希表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> right <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>right <span class=\"token operator\">&lt;</span> slen<span class=\"token punctuation\">;</span>right<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 略过不在固定哈希表中的元素</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                cmpHash<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 同时清空窗口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                left <span class=\"token operator\">=</span> right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//left 记录下一位</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            cmpHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// 插入和计数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">-</span>left <span class=\"token operator\">>=</span> plen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>         <span class=\"token comment\">//right 从 0 开始开窗口</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>cmpHash<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>cmpHash<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cmpHash <span class=\"token operator\">==</span> hash<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"unordered_map-hash-prefix-sum\"><a class=\"anchor\" href=\"#unordered_map-hash-prefix-sum\">#</a> unordered_map &amp; hash &amp; prefix sum</h2>\n<p><a href=\"https://leetcode.cn/problems/subarray-sum-equals-k/description/?envType=study-plan-v2&amp;envId=top-100-liked\">560 和为 K 的子数组</a><br />\n<strong>题解</strong></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>p</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">subarraySum_3</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> preSumRight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> hashMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 为什么要有此初始化？</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 主要是当数组只有一个元素时，历史前缀和数据 (也就是 hash 表) 是空的，因为还未来得及构建</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 当数组中这个元素正好等于 k 时，需要 hash 表中保存的历史前缀和数据有一个 key=0 的数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 如果数组中这个元素不等于 k 时，是不影响结果的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        hashMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 算一下当前前缀和</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            preSumRight <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 下面是前缀和的理解核心：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 假设有一个区间 [left, right], 该区间上元素和为 k</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 那么就有:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// ([0,right] 元素之和)  减去  ([0,left] 元素之和) 等于 (k)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 转换一下就是:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// ([0,right] 元素之和)  减去  (k)  等于  ([0,left] 元素之和)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// ([0,right] 元素之和) 就是</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">//      每次循环时立刻就能算出来的当前前缀和，姑且叫为 preSumRight</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// ([0,left] 元素之和) 就是</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//      存在 hash 表里面的历史前缀和数据，</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\">//      key 是历史前缀和数据姑且叫为 preSumLeft, value 是出现的次数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 可以得到：</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">int</span> preSumLeft <span class=\"token operator\">=</span> preSumRight <span class=\"token operator\">-</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>preSumLeft<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                result <span class=\"token operator\">+=</span> hashMap<span class=\"token punctuation\">[</span>preSumLeft<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// goto #cypress_1</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 将当前前缀和存储 hash 表</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            hashMap<span class=\"token punctuation\">[</span>preSumRight<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//  #cypress_1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">//  ques: 为什么是 result+= hashMap [preSumLeft] 而不是直接 result++ 呢？</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">//  2024/2/6 ans: 在这个问题之前，可以再考虑 “为什么使用 unordered_map 而不是 unordered_set”</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">//              unordered_map 的 first 记录前缀和，second 记录对应前缀和的个数，所以最开始有 hashMap [0] = 1 这个初始化</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">//              unordered_set 不允许重复，虽然两者的 count 非 0 即 1，均适应 if 的判断</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">//              但是 unordered_set 只能使用 res++，不能使用 res+=hashSet [preSumLeft]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">//              再回到最开始的问题，前缀和的个数是有必要的，配合如上的说明简单思考一下就可以得出该结论</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n",
            "tags": [
                "CS",
                "cpp",
                "题练簇",
                "cpp",
                "题练簇",
                "数据结构与算法"
            ]
        },
        {
            "id": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%AD%E6%B3%95%E5%8F%A5%E7%B0%87/%E8%AF%AD%E6%B3%95%E6%9D%82%E5%8F%A5/",
            "url": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%AD%E6%B3%95%E5%8F%A5%E7%B0%87/%E8%AF%AD%E6%B3%95%E6%9D%82%E5%8F%A5/",
            "title": "语法杂句",
            "date_published": "2024-02-22T03:19:51.000Z",
            "content_html": "<h1 id=\"语法句\"><a class=\"anchor\" href=\"#语法句\">#</a> 语法句</h1>\n<table>\n<thead>\n<tr>\n<th><span class=\"red\">汉语</span></th>\n<th><span class=\"red\">日语</span></th>\n<th><span class=\"red\">平假</span></th>\n<th><span class=\"red\">语法备注</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>我是学生</td>\n<td>私は 学生です</td>\n<td>わたしは がくせいです</td>\n<td>A は　B です　 A 是 B</td>\n</tr>\n<tr>\n<td>我不是学生</td>\n<td>私は　学生　では　ありません</td>\n<td>わたしは　がくせい　では　ありません</td>\n<td>A は　B　では　ありません A 不是 B (偏正式)</td>\n</tr>\n<tr>\n<td>我不是小学生</td>\n<td>私は 小学生 じゃ ありません</td>\n<td>わたしは　しょうがくせい　じゃ　ありません</td>\n<td>A は　B　じゃ　ありません　A 不是 B （偏口语）</td>\n</tr>\n<tr>\n<td>小王是学生吗</td>\n<td>王さんは 学生ですか</td>\n<td>おうさんは　がくせいですか</td>\n<td>A は　B ですか　A 是 B 吗</td>\n</tr>\n<tr>\n<td>小王是北京大学的学生</td>\n<td>王さんは 北京大学の学生 です</td>\n<td>おうさんは　ぺきんだいがく　の　がくせい　です</td>\n<td>の　一般情况下相当于 &quot;的&quot;</td>\n</tr>\n<tr>\n<td>那里是便利店</td>\n<td>あそこは　コンビニ です</td>\n<td>あそこは　こんびにです</td>\n<td>あそこ　那里（远距离）</td>\n</tr>\n<tr>\n<td>洗手间在超市的 2 楼</td>\n<td>お手洗いは　スーパーの二階です</td>\n<td>おてあらいは　すーぱーのにかいです</td>\n<td>A は B（场所）です</td>\n</tr>\n<tr>\n<td>打扰一下，请问 ABC 大学在哪里</td>\n<td>すみません、あのう、ABC 大学は　どこですか</td>\n<td>すみません、あのう、えーびーしーだいがくは　どこですか</td>\n<td>A は　どこですか  A 在哪里</td>\n</tr>\n<tr>\n<td>你也是北京大学的学生吗</td>\n<td>あなたも　北京大学の学生ですか</td>\n<td>あなたも　ぺきんだいがくのがくせいですか</td>\n<td>A も　B です  も相当于也</td>\n</tr>\n<tr>\n<td>中村先生是医生？教师？总经理？</td>\n<td>中村さんは　医者ですか、教師ですか、社長ですか</td>\n<td>なかむらさんは　いしゃですか、きょうしですか、しゃちょうですか</td>\n<td>A は　B ですか、C ですか，… ですか</td>\n</tr>\n<tr>\n<td>这件毛衣多少钱？</td>\n<td>このセーターは　いくらですか</td>\n<td>このせーたーは　いくらですか</td>\n<td>A は　いくらですか</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "语系",
                "日本語",
                "语法句簇",
                "语法句簇"
            ]
        },
        {
            "id": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%8D%E7%B0%87/%E7%AC%AC%E4%B8%89%E8%AF%BE/",
            "url": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%8D%E7%B0%87/%E7%AC%AC%E4%B8%89%E8%AF%BE/",
            "title": "第三课",
            "date_published": "2024-02-22T03:12:53.000Z",
            "content_html": "<h1 id=\"词\"><a class=\"anchor\" href=\"#词\">#</a> 词</h1>\n<table>\n<thead>\n<tr>\n<th><span class=\"red\">单词</span></th>\n<th><span class=\"red\">假名</span></th>\n<th><span class=\"red\">声调</span></th>\n<th><span class=\"red\">词义</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>デパート</td>\n<td>でぱーと</td>\n<td>2</td>\n<td>百货商店</td>\n</tr>\n<tr>\n<td>食堂</td>\n<td>しょくどう</td>\n<td>0</td>\n<td>食堂</td>\n</tr>\n<tr>\n<td>郵便局</td>\n<td>ゆうびんきょく</td>\n<td>3</td>\n<td>邮局</td>\n</tr>\n<tr>\n<td>銀行</td>\n<td>ぎんこう</td>\n<td>0</td>\n<td>银行</td>\n</tr>\n<tr>\n<td>図書館</td>\n<td>としょかん</td>\n<td>2</td>\n<td>图书馆</td>\n</tr>\n<tr>\n<td>マンション</td>\n<td>まんしょん</td>\n<td>1</td>\n<td>（高级) 公寓</td>\n</tr>\n<tr>\n<td>ホテル</td>\n<td>ほてる</td>\n<td>1</td>\n<td>宾馆</td>\n</tr>\n<tr>\n<td>コンビニ</td>\n<td>こんびに</td>\n<td>0</td>\n<td>便利店</td>\n</tr>\n<tr>\n<td>喫茶店</td>\n<td>きっさてん</td>\n<td>0</td>\n<td>咖啡馆</td>\n</tr>\n<tr>\n<td>病院</td>\n<td>びょういん</td>\n<td>0</td>\n<td>医院</td>\n</tr>\n<tr>\n<td>本屋</td>\n<td>ほんや</td>\n<td>1</td>\n<td>书店</td>\n</tr>\n<tr>\n<td>レストラン</td>\n<td>れすとらん</td>\n<td>1</td>\n<td>餐馆，西餐馆</td>\n</tr>\n<tr>\n<td>ビル</td>\n<td>びる</td>\n<td>1</td>\n<td>大楼，大厦</td>\n</tr>\n<tr>\n<td>建物</td>\n<td>たてもの</td>\n<td>2</td>\n<td>大楼，建筑物</td>\n</tr>\n<tr>\n<td>売り場</td>\n<td>うりば</td>\n<td>0</td>\n<td>柜台，出售处</td>\n</tr>\n<tr>\n<td>トイレ</td>\n<td>といれ</td>\n<td>1</td>\n<td>厕所</td>\n</tr>\n<tr>\n<td>入り口</td>\n<td>いりぐち</td>\n<td>0</td>\n<td>入口</td>\n</tr>\n<tr>\n<td>事務所</td>\n<td>じむしょ</td>\n<td>2</td>\n<td>事务所</td>\n</tr>\n<tr>\n<td>受付</td>\n<td>うけつけ</td>\n<td>0</td>\n<td>接待处</td>\n</tr>\n<tr>\n<td>バーゲン会場</td>\n<td>ばーげんかいじょう</td>\n<td>5</td>\n<td>降价处理大卖场</td>\n</tr>\n<tr>\n<td>エスカレーター</td>\n<td>えすかれーたー</td>\n<td>4</td>\n<td>自动扶梯</td>\n</tr>\n<tr>\n<td>服</td>\n<td>ふく</td>\n<td>2</td>\n<td>衣服</td>\n</tr>\n<tr>\n<td>コート</td>\n<td>こーと</td>\n<td>1</td>\n<td>风衣，大衣</td>\n</tr>\n<tr>\n<td>デジカメ</td>\n<td>でじかめ</td>\n<td>0</td>\n<td>数码相机</td>\n</tr>\n<tr>\n<td>国</td>\n<td>くに</td>\n<td>0</td>\n<td>国家</td>\n</tr>\n<tr>\n<td>地図</td>\n<td>ちず</td>\n<td>1</td>\n<td>地图</td>\n</tr>\n<tr>\n<td>隣</td>\n<td>となり</td>\n<td>0</td>\n<td>旁边</td>\n</tr>\n<tr>\n<td>周辺</td>\n<td>しゅうへん</td>\n<td>0</td>\n<td>附近，周边</td>\n</tr>\n<tr>\n<td>今日</td>\n<td>きょう</td>\n<td>1</td>\n<td>今天</td>\n</tr>\n<tr>\n<td>水曜日</td>\n<td>すいようび</td>\n<td>3</td>\n<td>星期三</td>\n</tr>\n<tr>\n<td>木曜日</td>\n<td>もくようび</td>\n<td>3</td>\n<td>星期四</td>\n</tr>\n<tr>\n<td>ここ</td>\n<td>ここ</td>\n<td>0</td>\n<td>这里</td>\n</tr>\n<tr>\n<td>そこ</td>\n<td>そこ</td>\n<td>0</td>\n<td>那里</td>\n</tr>\n<tr>\n<td>あそこ</td>\n<td>あそこ</td>\n<td>0</td>\n<td>那里</td>\n</tr>\n<tr>\n<td>こちら</td>\n<td>こちら</td>\n<td>0</td>\n<td>这边</td>\n</tr>\n<tr>\n<td>そちら</td>\n<td>そちら</td>\n<td>0</td>\n<td>那边</td>\n</tr>\n<tr>\n<td>あちら</td>\n<td>あちら</td>\n<td>0</td>\n<td>那边</td>\n</tr>\n<tr>\n<td>どこ</td>\n<td>どこ</td>\n<td>1</td>\n<td>哪里</td>\n</tr>\n<tr>\n<td>どちら</td>\n<td>どちら</td>\n<td>1</td>\n<td>哪边</td>\n</tr>\n<tr>\n<td>あのう</td>\n<td>あのう</td>\n<td>0</td>\n<td>请问</td>\n</tr>\n<tr>\n<td>上海</td>\n<td>しゃんはい</td>\n<td>1</td>\n<td>上海</td>\n</tr>\n<tr>\n<td>東京</td>\n<td>とうきょう</td>\n<td>0</td>\n<td>东京</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "语系",
                "日本語",
                "词簇",
                "日本語"
            ]
        },
        {
            "id": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%8D%E7%B0%87/%E7%AC%AC%E4%BA%8C%E8%AF%BE/",
            "url": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%8D%E7%B0%87/%E7%AC%AC%E4%BA%8C%E8%AF%BE/",
            "title": "第二课",
            "date_published": "2024-02-21T16:19:53.000Z",
            "content_html": "<h1 id=\"词\"><a class=\"anchor\" href=\"#词\">#</a> 词</h1>\n<table>\n<thead>\n<tr>\n<th><span class=\"red\">单词</span></th>\n<th><span class=\"red\">假名</span></th>\n<th><span class=\"red\">声调</span></th>\n<th><span class=\"red\">词义</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中国人</td>\n<td>ちゅうごくじん</td>\n<td>4</td>\n<td>中国人</td>\n</tr>\n<tr>\n<td>日本人</td>\n<td>にほんじん</td>\n<td>4</td>\n<td>日本人</td>\n</tr>\n<tr>\n<td>韓国人</td>\n<td>かんこくじん</td>\n<td>4</td>\n<td>韩国人</td>\n</tr>\n<tr>\n<td>アメリカ人</td>\n<td>あめりかじん</td>\n<td>4</td>\n<td>美国人</td>\n</tr>\n<tr>\n<td>フランス人</td>\n<td>ふらんすじん</td>\n<td>4</td>\n<td>法国人</td>\n</tr>\n<tr>\n<td>学生</td>\n<td>がくせい</td>\n<td>0</td>\n<td>学生</td>\n</tr>\n<tr>\n<td>留学生</td>\n<td>りゅうがくせい</td>\n<td>3</td>\n<td>留学生</td>\n</tr>\n<tr>\n<td>教授</td>\n<td>きょうじゅ</td>\n<td>0</td>\n<td>教授</td>\n</tr>\n<tr>\n<td>社員</td>\n<td>しゃいん</td>\n<td>1</td>\n<td>职员</td>\n</tr>\n<tr>\n<td>会社員</td>\n<td>かいしゃいん</td>\n<td>3</td>\n<td>公司职员</td>\n</tr>\n<tr>\n<td>店員</td>\n<td>てんいん</td>\n<td>0</td>\n<td>店员</td>\n</tr>\n<tr>\n<td>研修生</td>\n<td>けんしゅうせい</td>\n<td>3</td>\n<td>进修生</td>\n</tr>\n<tr>\n<td>企業</td>\n<td>きぎょう</td>\n<td>1</td>\n<td>企业</td>\n</tr>\n<tr>\n<td>大学</td>\n<td>だいがく</td>\n<td>0</td>\n<td>大学</td>\n</tr>\n<tr>\n<td>父</td>\n<td>ちち</td>\n<td>1、2</td>\n<td>父亲</td>\n</tr>\n<tr>\n<td>課長</td>\n<td>かちょう</td>\n<td>0</td>\n<td>科长</td>\n</tr>\n<tr>\n<td>社長</td>\n<td>しゃちょう</td>\n<td>0</td>\n<td>总经理</td>\n</tr>\n<tr>\n<td>出迎え</td>\n<td>でむかえ</td>\n<td>0</td>\n<td>迎接</td>\n</tr>\n<tr>\n<td>あの人</td>\n<td>あのひと</td>\n<td>2</td>\n<td>那个人</td>\n</tr>\n<tr>\n<td>私</td>\n<td>わたし</td>\n<td>0</td>\n<td>我</td>\n</tr>\n<tr>\n<td>あなた</td>\n<td>あなた</td>\n<td>2</td>\n<td>你</td>\n</tr>\n<tr>\n<td>どうも</td>\n<td>どうも</td>\n<td>1</td>\n<td>非常，很</td>\n</tr>\n<tr>\n<td>はい</td>\n<td>はい</td>\n<td>1</td>\n<td>是（应答）</td>\n</tr>\n<tr>\n<td>いいえ</td>\n<td>いいえ</td>\n<td>3</td>\n<td>不，不是</td>\n</tr>\n<tr>\n<td>あっ</td>\n<td>あっ</td>\n<td></td>\n<td>哎呀</td>\n</tr>\n<tr>\n<td>李</td>\n<td>り</td>\n<td></td>\n<td>李</td>\n</tr>\n<tr>\n<td>王</td>\n<td>おう</td>\n<td>1</td>\n<td>王</td>\n</tr>\n<tr>\n<td>張</td>\n<td>ちょう</td>\n<td>1</td>\n<td>张</td>\n</tr>\n<tr>\n<td>森</td>\n<td>もり</td>\n<td>0</td>\n<td>森</td>\n</tr>\n<tr>\n<td>林</td>\n<td>はやし</td>\n<td>0</td>\n<td>林</td>\n</tr>\n<tr>\n<td>小野</td>\n<td>あの</td>\n<td>0</td>\n<td>小野</td>\n</tr>\n<tr>\n<td>吉田</td>\n<td>よしだ</td>\n<td>0</td>\n<td>吉田</td>\n</tr>\n<tr>\n<td>田中</td>\n<td>たなか</td>\n<td>0</td>\n<td>田中</td>\n</tr>\n<tr>\n<td>中村</td>\n<td>なかむら</td>\n<td>0</td>\n<td>中村</td>\n</tr>\n<tr>\n<td>太郎</td>\n<td>たろう</td>\n<td>1</td>\n<td>太郎</td>\n</tr>\n<tr>\n<td>金</td>\n<td>キム</td>\n<td>1</td>\n<td>金（韩国）</td>\n</tr>\n<tr>\n<td>金</td>\n<td>きん</td>\n<td>1</td>\n<td>金（中国）</td>\n</tr>\n<tr>\n<td>中国</td>\n<td>ちゅうごく</td>\n<td>1</td>\n<td>中国</td>\n</tr>\n<tr>\n<td>東京大学</td>\n<td>とうきょうだいがく</td>\n<td>5</td>\n<td>东京大学</td>\n</tr>\n<tr>\n<td>北京大学</td>\n<td>ぺきんだいがく</td>\n<td>4</td>\n<td>北京大学</td>\n</tr>\n<tr>\n<td>北京旅行者</td>\n<td>ぺきんりょこうしゃ</td>\n<td>5</td>\n<td>北京旅行社</td>\n</tr>\n<tr>\n<td>日中商事</td>\n<td>にっちゅうしょうじ</td>\n<td>5</td>\n<td>日中商社</td>\n</tr>\n<tr>\n<td>こんにちは</td>\n<td>こんにちは</td>\n<td>5</td>\n<td>你好</td>\n</tr>\n<tr>\n<td>すみません</td>\n<td>すみません</td>\n<td>4</td>\n<td>对不起</td>\n</tr>\n<tr>\n<td>どうぞ</td>\n<td>どうぞ</td>\n<td>1</td>\n<td>请</td>\n</tr>\n<tr>\n<td>~ さん、君</td>\n<td>さん、くん</td>\n<td></td>\n<td>先生，小姐</td>\n</tr>\n<tr>\n<td>初めまして</td>\n<td>はじめまして</td>\n<td>4</td>\n<td>初次见面</td>\n</tr>\n<tr>\n<td>こちらこそ</td>\n<td>こちらこそ</td>\n<td>4</td>\n<td>我才要（请您～～）</td>\n</tr>\n<tr>\n<td>そうです</td>\n<td>そうです</td>\n<td>1</td>\n<td>是（这样）</td>\n</tr>\n<tr>\n<td>ちがいます</td>\n<td>ちがいます</td>\n<td>4</td>\n<td>不是</td>\n</tr>\n<tr>\n<td>わかりません</td>\n<td>わかりません</td>\n<td>5</td>\n<td>不知道</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "语系",
                "日本語",
                "词簇",
                "日本語"
            ]
        },
        {
            "id": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%8D%E7%B0%87/%E7%AC%AC%E4%B8%80%E8%AF%BE/",
            "url": "https://cypressen.github.io/languageStudy/%E6%97%A5%E6%9C%AC%E8%AA%9E/%E8%AF%8D%E7%B0%87/%E7%AC%AC%E4%B8%80%E8%AF%BE/",
            "title": "第一课",
            "date_published": "2024-02-21T16:12:53.000Z",
            "content_html": "<h1 id=\"词\"><a class=\"anchor\" href=\"#词\">#</a> 词</h1>\n<table>\n<thead>\n<tr>\n<th><span class=\"red\">单词</span></th>\n<th><span class=\"red\">假名</span></th>\n<th><span class=\"red\">声调</span></th>\n<th><span class=\"red\">词义</span></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>中国人</td>\n<td>ちゅうごくじん</td>\n<td>4</td>\n<td>中国人</td>\n</tr>\n<tr>\n<td>日本人</td>\n<td>にほんじん</td>\n<td>4</td>\n<td>日本人</td>\n</tr>\n<tr>\n<td>韓国人</td>\n<td>かんこくじん</td>\n<td>4</td>\n<td>韩国人</td>\n</tr>\n<tr>\n<td>アメリカ人</td>\n<td>あめりかじん</td>\n<td>4</td>\n<td>美国人</td>\n</tr>\n<tr>\n<td>フランス人</td>\n<td>ふらんすじん</td>\n<td>4</td>\n<td>法国人</td>\n</tr>\n<tr>\n<td>学生</td>\n<td>がくせい</td>\n<td>0</td>\n<td>学生</td>\n</tr>\n<tr>\n<td>留学生</td>\n<td>りゅうがくせい</td>\n<td>3</td>\n<td>留学生</td>\n</tr>\n<tr>\n<td>教授</td>\n<td>きょうじゅ</td>\n<td>0</td>\n<td>教授</td>\n</tr>\n<tr>\n<td>社員</td>\n<td>しゃいん</td>\n<td>1</td>\n<td>职员</td>\n</tr>\n<tr>\n<td>会社員</td>\n<td>かいしゃいん</td>\n<td>3</td>\n<td>公司职员</td>\n</tr>\n<tr>\n<td>店員</td>\n<td>てんいん</td>\n<td>0</td>\n<td>店员</td>\n</tr>\n<tr>\n<td>研修生</td>\n<td>けんしゅうせい</td>\n<td>3</td>\n<td>进修生</td>\n</tr>\n<tr>\n<td>企業</td>\n<td>きぎょう</td>\n<td>1</td>\n<td>企业</td>\n</tr>\n<tr>\n<td>大学</td>\n<td>だいがく</td>\n<td>0</td>\n<td>大学</td>\n</tr>\n<tr>\n<td>父</td>\n<td>ちち</td>\n<td>1、2</td>\n<td>父亲</td>\n</tr>\n<tr>\n<td>課長</td>\n<td>かちょう</td>\n<td>0</td>\n<td>科长</td>\n</tr>\n<tr>\n<td>社長</td>\n<td>しゃちょう</td>\n<td>0</td>\n<td>总经理</td>\n</tr>\n<tr>\n<td>出迎え</td>\n<td>でむかえ</td>\n<td>0</td>\n<td>迎接</td>\n</tr>\n<tr>\n<td>あの人</td>\n<td>あのひと</td>\n<td>2</td>\n<td>那个人</td>\n</tr>\n<tr>\n<td>私</td>\n<td>わたし</td>\n<td>0</td>\n<td>我</td>\n</tr>\n<tr>\n<td>あなた</td>\n<td>あなた</td>\n<td>2</td>\n<td>你</td>\n</tr>\n<tr>\n<td>どうも</td>\n<td>どうも</td>\n<td>1</td>\n<td>非常，很</td>\n</tr>\n<tr>\n<td>はい</td>\n<td>はい</td>\n<td>1</td>\n<td>是（应答）</td>\n</tr>\n<tr>\n<td>いいえ</td>\n<td>いいえ</td>\n<td>3</td>\n<td>不，不是</td>\n</tr>\n<tr>\n<td>あっ</td>\n<td>あっ</td>\n<td></td>\n<td>哎呀</td>\n</tr>\n<tr>\n<td>李</td>\n<td>り</td>\n<td></td>\n<td>李</td>\n</tr>\n<tr>\n<td>王</td>\n<td>おう</td>\n<td>1</td>\n<td>王</td>\n</tr>\n<tr>\n<td>張</td>\n<td>ちょう</td>\n<td>1</td>\n<td>张</td>\n</tr>\n<tr>\n<td>森</td>\n<td>もり</td>\n<td>0</td>\n<td>森</td>\n</tr>\n<tr>\n<td>林</td>\n<td>はやし</td>\n<td>0</td>\n<td>林</td>\n</tr>\n<tr>\n<td>小野</td>\n<td>あの</td>\n<td>0</td>\n<td>小野</td>\n</tr>\n<tr>\n<td>吉田</td>\n<td>よしだ</td>\n<td>0</td>\n<td>吉田</td>\n</tr>\n<tr>\n<td>田中</td>\n<td>たなか</td>\n<td>0</td>\n<td>田中</td>\n</tr>\n<tr>\n<td>中村</td>\n<td>なかむら</td>\n<td>0</td>\n<td>中村</td>\n</tr>\n<tr>\n<td>太郎</td>\n<td>たろう</td>\n<td>1</td>\n<td>太郎</td>\n</tr>\n<tr>\n<td>金</td>\n<td>キム</td>\n<td>1</td>\n<td>金（韩国）</td>\n</tr>\n<tr>\n<td>金</td>\n<td>きん</td>\n<td>1</td>\n<td>金（中国）</td>\n</tr>\n<tr>\n<td>中国</td>\n<td>ちゅうごく</td>\n<td>1</td>\n<td>中国</td>\n</tr>\n<tr>\n<td>東京大学</td>\n<td>とうきょうだいがく</td>\n<td>5</td>\n<td>东京大学</td>\n</tr>\n<tr>\n<td>北京大学</td>\n<td>ぺきんだいがく</td>\n<td>4</td>\n<td>北京大学</td>\n</tr>\n<tr>\n<td>北京旅行者</td>\n<td>ぺきんりょこうしゃ</td>\n<td>5</td>\n<td>北京旅行社</td>\n</tr>\n<tr>\n<td>日中商事</td>\n<td>にっちゅうしょうじ</td>\n<td>5</td>\n<td>日中商社</td>\n</tr>\n<tr>\n<td>こんにちは</td>\n<td>こんにちは</td>\n<td>5</td>\n<td>你好</td>\n</tr>\n<tr>\n<td>すみません</td>\n<td>すみません</td>\n<td>4</td>\n<td>对不起</td>\n</tr>\n<tr>\n<td>どうぞ</td>\n<td>どうぞ</td>\n<td>1</td>\n<td>请</td>\n</tr>\n<tr>\n<td>~ さん、君</td>\n<td>さん、くん</td>\n<td></td>\n<td>先生，小姐</td>\n</tr>\n<tr>\n<td>初めまして</td>\n<td>はじめまして</td>\n<td>4</td>\n<td>初次见面</td>\n</tr>\n<tr>\n<td>こちらこそ</td>\n<td>こちらこそ</td>\n<td>4</td>\n<td>我才要（请您～～）</td>\n</tr>\n<tr>\n<td>そうです</td>\n<td>そうです</td>\n<td>1</td>\n<td>是（这样）</td>\n</tr>\n<tr>\n<td>ちがいます</td>\n<td>ちがいます</td>\n<td>4</td>\n<td>不是</td>\n</tr>\n<tr>\n<td>わかりません</td>\n<td>わかりません</td>\n<td>5</td>\n<td>不知道</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "语系",
                "日本語",
                "词簇",
                "日本語"
            ]
        },
        {
            "id": "https://cypressen.github.io/toolCode/cpp%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%B4%E6%96%87%E4%BB%B6/",
            "url": "https://cypressen.github.io/toolCode/cpp%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%B4%E6%96%87%E4%BB%B6/",
            "title": "[cpp]自定义头文件",
            "date_published": "2024-02-21T11:01:33.000Z",
            "content_html": "<h1 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h1>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>cypress.h</span></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 改文件创建于 2024/2/12</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 自写的 api 名称均带有_cps 后缀 cp (res) s</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 目录：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 计时器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 二叉树</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 链表</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 计时器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timer_cps</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>time_point<span class=\"token operator\">&lt;</span>chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token operator\">></span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    chrono<span class=\"token double-colon punctuation\">::</span>duration<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> duration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">timer_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        start <span class=\"token operator\">=</span> chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">timer_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        end <span class=\"token operator\">=</span> chrono<span class=\"token double-colon punctuation\">::</span>high_resolution_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        duration <span class=\"token operator\">=</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">float</span> time <span class=\"token operator\">=</span> duration<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000.0f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nTime took \"</span> <span class=\"token operator\">&lt;&lt;</span> time <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ms\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">// LEETCODE 风格树节点</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TreeNode</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">,</span> TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 层序创建二叉树</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">tree_cps</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span>root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function\">tree_cps</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        queue<span class=\"token operator\">&lt;</span>TreeNode <span class=\"token operator\">*</span><span class=\"token operator\">></span> store<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">auto</span> cur <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                TreeNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                cur<span class=\"token operator\">-></span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token function\">stoi</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                TreeNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                cur<span class=\"token operator\">-></span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            store<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">tree_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> dele_LO <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>TreeNode <span class=\"token operator\">*</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token function\">dele_LO</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token function\">dele_LO</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token function\">dele_LO</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>        root <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        queue<span class=\"token operator\">&lt;</span>TreeNode <span class=\"token operator\">*</span><span class=\"token operator\">></span> store<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nTREE_PRINT : \\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token keyword\">auto</span> getF <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>getF<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                cout <span class=\"token operator\">&lt;&lt;</span> getF<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>getF<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                store<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>getF<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            store<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    TreeNode <span class=\"token operator\">*</span><span class=\"token function\">get_root_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">// LEETCODE 风格链表</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">// Definition for singly-linked list.</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">ListNode</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> ListNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">list_cps</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token function\">list_cps</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">ListNode</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            tail<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            tail<span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token operator\">~</span><span class=\"token function\">list_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> helper <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        head <span class=\"token operator\">=</span> tail <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">print_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        ListNode<span class=\"token operator\">*</span> temp <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\nLIST_PRINT : \\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            cout<span class=\"token operator\">&lt;&lt;</span>temp<span class=\"token operator\">-></span>val<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"  \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            temp<span class=\"token operator\">=</span>temp<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">get_head_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">get_tail_cps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> tail<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h1>\n<p>「工具文件 (cypress.h) 修改日志」</p>\n<p>2024/2/12<br />\n 创建文件，并写入了第一个对象，cps_timer，该对象功能用来记时<br />\n写入：<br />\ntimer_cps 计时器<br />\n力扣风格的 TreeNode</p>\n<p>2024/2/16<br />\n 写入：<br />\n力扣风格的 ListNode</p>\n",
            "tags": [
                "toolCode",
                "cpp",
                "自定义头文件",
                "工具文件"
            ]
        },
        {
            "id": "https://cypressen.github.io/shokax/shokaxLog/shokax-log_1/",
            "url": "https://cypressen.github.io/shokax/shokaxLog/shokax-log_1/",
            "title": "[shokax]log_1",
            "date_published": "2024-02-21T05:09:00.000Z",
            "content_html": "<h2 id=\"关于博客主题\"><a class=\"anchor\" href=\"#关于博客主题\">#</a> 关于博客主题</h2>\n<p>十分感谢 shoka 和 shokax 项目的各位付出，shoka 的主题非常适合 otaku 创建一个属于自己的个性博客，shokax 的派生足以证明大家对 shoka 的喜爱。<br />\n正是如此，我也愿意花了一天时间从 shoka 转移到 shokax。<s>身在 shokax 心在 shoka</s></p>\n<h2 id=\"启用的插件\"><a class=\"anchor\" href=\"#启用的插件\">#</a> 启用的插件</h2>\n<ul>\n<li>图片轮换</li>\n<li>音频播放器</li>\n</ul>\n<h2 id=\"关注的问题\"><a class=\"anchor\" href=\"#关注的问题\">#</a> 关注的问题</h2>\n<ul>\n<li>deploy 到 github 后图片清晰度问题，本地 md 的理想呈现</li>\n<li>在 shokax 引入自定义 css</li>\n<li>评论系统，浏览量系统</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"/pic/shokax/log_1/1.png\" alt=\"顺便带个图片测试\" /></p>\n",
            "tags": [
                "shokax",
                "shokaXlog",
                "log"
            ]
        }
    ]
}